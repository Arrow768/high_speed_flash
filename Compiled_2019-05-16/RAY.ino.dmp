
C:\Users\Tyler\AppData\Local\Temp\arduino_build_573632\RAY.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 00 	jmp	0x124	; 0x124 <__ctors_end>
       4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
       8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
       c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      10:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      14:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      18:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      1c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      20:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      24:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      28:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      30:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      34:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      38:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      3c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      40:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__vector_16>
      44:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      48:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_18>
      4c:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_19>
      50:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      54:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      58:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      5c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      60:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
      64:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	20 20       	and	r2, r0
      6a:	20 43       	sbci	r18, 0x30	; 48
      6c:	75 72       	andi	r23, 0x25	; 37
      6e:	72 65       	ori	r23, 0x52	; 82
      70:	6e 74       	andi	r22, 0x4E	; 78
      72:	3a 20       	and	r3, r10
	...

00000075 <_ZZ12printHistoryvE3__c_0>:
      75:	20 2d 3e 20 00                                       -> .

0000007a <_ZZ12printHistoryvE3__c>:
      7a:	20 20 20 56 6f 6c 74 61 67 65 3a 20 00                 Voltage: .

00000087 <_ZZ9runSerialvE3__c_1>:
      87:	54 79 70 65 20 65 20 74 6f 20 65 72 61 73 65 20     Type e to erase 
      97:	68 69 73 74 6f 72 79 00                             history.

0000009f <_ZZ9runSerialvE3__c_0>:
      9f:	54 79 70 65 20 70 20 74 6f 20 70 72 69 6e 74 20     Type p to print 
      af:	68 69 73 74 6f 72 79 00                             history.

000000b7 <_ZZ9runSerialvE3__c>:
      b7:	48 69 73 74 6f 72 79 20 43 6c 65 61 72 65 64 00     History Cleared.

000000c7 <port_to_output_PGM>:
      c7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000d1 <port_to_mode_PGM>:
      d1:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000db <port_to_input_PGM>:
      db:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000e5 <digital_pin_to_port_PGM>:
      e5:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      f5:	03 03 03 03                                         ....

000000f9 <digital_pin_to_bit_mask_PGM>:
      f9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     109:	04 08 10 20                                         ... 

0000010d <digital_pin_to_timer_PGM>:
     10d:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     11d:	00 00 00 00 00                                      .....

00000122 <__ctors_start>:
     122:	97 0d       	add	r25, r7

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf ef       	ldi	r28, 0xFF	; 255
     12a:	d8 e0       	ldi	r29, 0x08	; 8
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	11 e0       	ldi	r17, 0x01	; 1
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	ee e3       	ldi	r30, 0x3E	; 62
     138:	f1 e2       	ldi	r31, 0x21	; 33
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	a2 38       	cpi	r26, 0x82	; 130
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
     146:	22 e0       	ldi	r18, 0x02	; 2
     148:	a2 e8       	ldi	r26, 0x82	; 130
     14a:	b1 e0       	ldi	r27, 0x01	; 1
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a5 35       	cpi	r26, 0x55	; 85
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>

00000156 <__do_global_ctors>:
     156:	10 e0       	ldi	r17, 0x00	; 0
     158:	c2 e9       	ldi	r28, 0x92	; 146
     15a:	d0 e0       	ldi	r29, 0x00	; 0
     15c:	04 c0       	rjmp	.+8      	; 0x166 <__do_global_ctors+0x10>
     15e:	21 97       	sbiw	r28, 0x01	; 1
     160:	fe 01       	movw	r30, r28
     162:	0e 94 83 10 	call	0x2106	; 0x2106 <__tablejump2__>
     166:	c1 39       	cpi	r28, 0x91	; 145
     168:	d1 07       	cpc	r29, r17
     16a:	c9 f7       	brne	.-14     	; 0x15e <__do_global_ctors+0x8>
     16c:	0e 94 4c 06 	call	0xc98	; 0xc98 <main>
     170:	0c 94 9d 10 	jmp	0x213a	; 0x213a <_exit>

00000174 <__bad_interrupt>:
     174:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000178 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     178:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     17a:	f8 94       	cli
	m = timer0_overflow_count;
     17c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <timer0_overflow_count>
     180:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <timer0_overflow_count+0x1>
     184:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <timer0_overflow_count+0x2>
     188:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     18c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     18e:	a8 9b       	sbis	0x15, 0	; 21
     190:	05 c0       	rjmp	.+10     	; 0x19c <micros+0x24>
     192:	2f 3f       	cpi	r18, 0xFF	; 255
     194:	19 f0       	breq	.+6      	; 0x19c <micros+0x24>
		m++;
     196:	01 96       	adiw	r24, 0x01	; 1
     198:	a1 1d       	adc	r26, r1
     19a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     19c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     19e:	ba 2f       	mov	r27, r26
     1a0:	a9 2f       	mov	r26, r25
     1a2:	98 2f       	mov	r25, r24
     1a4:	88 27       	eor	r24, r24
     1a6:	82 0f       	add	r24, r18
     1a8:	91 1d       	adc	r25, r1
     1aa:	a1 1d       	adc	r26, r1
     1ac:	b1 1d       	adc	r27, r1
     1ae:	bc 01       	movw	r22, r24
     1b0:	cd 01       	movw	r24, r26
     1b2:	43 e0       	ldi	r20, 0x03	; 3
     1b4:	66 0f       	add	r22, r22
     1b6:	77 1f       	adc	r23, r23
     1b8:	88 1f       	adc	r24, r24
     1ba:	99 1f       	adc	r25, r25
     1bc:	4a 95       	dec	r20
     1be:	d1 f7       	brne	.-12     	; 0x1b4 <micros+0x3c>
}
     1c0:	08 95       	ret

000001c2 <_ZN5Print5writeEPKc.constprop.38>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     1c2:	00 97       	sbiw	r24, 0x00	; 0
     1c4:	69 f0       	breq	.+26     	; 0x1e0 <_ZN5Print5writeEPKc.constprop.38+0x1e>
      return write((const uint8_t *)str, strlen(str));
     1c6:	fc 01       	movw	r30, r24
     1c8:	01 90       	ld	r0, Z+
     1ca:	00 20       	and	r0, r0
     1cc:	e9 f7       	brne	.-6      	; 0x1c8 <_ZN5Print5writeEPKc.constprop.38+0x6>
     1ce:	31 97       	sbiw	r30, 0x01	; 1
     1d0:	af 01       	movw	r20, r30
     1d2:	48 1b       	sub	r20, r24
     1d4:	59 0b       	sbc	r21, r25
     1d6:	bc 01       	movw	r22, r24
     1d8:	81 ea       	ldi	r24, 0xA1	; 161
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	0c 94 00 04 	jmp	0x800	; 0x800 <_ZN5Print5writeEPKhj>
    }
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	08 95       	ret

000001e6 <_ZN5Print11printNumberEmh.constprop.20>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     1e6:	8f 92       	push	r8
     1e8:	9f 92       	push	r9
     1ea:	af 92       	push	r10
     1ec:	bf 92       	push	r11
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	a1 97       	sbiw	r28, 0x21	; 33
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     206:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     208:	42 30       	cpi	r20, 0x02	; 2
     20a:	08 f4       	brcc	.+2      	; 0x20e <_ZN5Print11printNumberEmh.constprop.20+0x28>
     20c:	4a e0       	ldi	r20, 0x0A	; 10
     20e:	8e 01       	movw	r16, r28
     210:	0f 5d       	subi	r16, 0xDF	; 223
     212:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     214:	84 2e       	mov	r8, r20
     216:	91 2c       	mov	r9, r1
     218:	a1 2c       	mov	r10, r1
     21a:	b1 2c       	mov	r11, r1
     21c:	a5 01       	movw	r20, r10
     21e:	94 01       	movw	r18, r8
     220:	0e 94 42 10 	call	0x2084	; 0x2084 <__udivmodsi4>
     224:	e6 2f       	mov	r30, r22
    n /= base;
     226:	b9 01       	movw	r22, r18
     228:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     22a:	01 50       	subi	r16, 0x01	; 1
     22c:	11 09       	sbc	r17, r1
     22e:	ea 30       	cpi	r30, 0x0A	; 10
     230:	14 f4       	brge	.+4      	; 0x236 <_ZN5Print11printNumberEmh.constprop.20+0x50>
     232:	e0 5d       	subi	r30, 0xD0	; 208
     234:	01 c0       	rjmp	.+2      	; 0x238 <_ZN5Print11printNumberEmh.constprop.20+0x52>
     236:	e9 5c       	subi	r30, 0xC9	; 201
     238:	d8 01       	movw	r26, r16
     23a:	ec 93       	st	X, r30
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     23c:	23 2b       	or	r18, r19
     23e:	24 2b       	or	r18, r20
     240:	25 2b       	or	r18, r21
     242:	61 f7       	brne	.-40     	; 0x21c <_ZN5Print11printNumberEmh.constprop.20+0x36>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     244:	c8 01       	movw	r24, r16
     246:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>
}
     24a:	a1 96       	adiw	r28, 0x21	; 33
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	bf 90       	pop	r11
     260:	af 90       	pop	r10
     262:	9f 90       	pop	r9
     264:	8f 90       	pop	r8
     266:	08 95       	ret

00000268 <_ZN5Print7printlnEii.constprop.15>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     274:	6c 01       	movw	r12, r24
     276:	99 0f       	add	r25, r25
     278:	ee 08       	sbc	r14, r14
     27a:	ff 08       	sbc	r15, r15
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     27c:	f7 fe       	sbrs	r15, 7
     27e:	13 c0       	rjmp	.+38     	; 0x2a6 <_ZN5Print7printlnEii.constprop.15+0x3e>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     280:	6d e2       	ldi	r22, 0x2D	; 45
     282:	81 ea       	ldi	r24, 0xA1	; 161
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 97 04 	call	0x92e	; 0x92e <_ZN14HardwareSerial5writeEh>
     28a:	ec 01       	movw	r28, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
     28c:	66 27       	eor	r22, r22
     28e:	77 27       	eor	r23, r23
     290:	cb 01       	movw	r24, r22
     292:	6c 19       	sub	r22, r12
     294:	7d 09       	sbc	r23, r13
     296:	8e 09       	sbc	r24, r14
     298:	9f 09       	sbc	r25, r15
     29a:	4a e0       	ldi	r20, 0x0A	; 10
     29c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN5Print11printNumberEmh.constprop.20>
     2a0:	c8 0f       	add	r28, r24
     2a2:	d9 1f       	adc	r29, r25
     2a4:	06 c0       	rjmp	.+12     	; 0x2b2 <_ZN5Print7printlnEii.constprop.15+0x4a>
    }
    return printNumber(n, 10);
     2a6:	4a e0       	ldi	r20, 0x0A	; 10
     2a8:	c7 01       	movw	r24, r14
     2aa:	b6 01       	movw	r22, r12
     2ac:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN5Print11printNumberEmh.constprop.20>
     2b0:	ec 01       	movw	r28, r24
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
     2b2:	80 e5       	ldi	r24, 0x50	; 80
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     2ba:	8c 0f       	add	r24, r28
     2bc:	9d 1f       	adc	r25, r29
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	08 95       	ret

000002cc <_ZN5Print5printEPK19__FlashStringHelper.constprop.7>:
    else break;
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	8c 01       	movw	r16, r24
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     2d6:	c0 e0       	ldi	r28, 0x00	; 0
     2d8:	d0 e0       	ldi	r29, 0x00	; 0
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     2da:	f8 01       	movw	r30, r16
     2dc:	ec 0f       	add	r30, r28
     2de:	fd 1f       	adc	r31, r29
     2e0:	64 91       	lpm	r22, Z
    if (c == 0) break;
     2e2:	66 23       	and	r22, r22
     2e4:	41 f0       	breq	.+16     	; 0x2f6 <_ZN5Print5printEPK19__FlashStringHelper.constprop.7+0x2a>
    if (write(c)) n++;
     2e6:	81 ea       	ldi	r24, 0xA1	; 161
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	0e 94 97 04 	call	0x92e	; 0x92e <_ZN14HardwareSerial5writeEh>
     2ee:	89 2b       	or	r24, r25
     2f0:	11 f0       	breq	.+4      	; 0x2f6 <_ZN5Print5printEPK19__FlashStringHelper.constprop.7+0x2a>
     2f2:	21 96       	adiw	r28, 0x01	; 1
     2f4:	f2 cf       	rjmp	.-28     	; 0x2da <_ZN5Print5printEPK19__FlashStringHelper.constprop.7+0xe>
    else break;
  }
  return n;
}
     2f6:	ce 01       	movw	r24, r28
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	08 95       	ret

00000302 <_ZN5Print7printlnEPK19__FlashStringHelper.constprop.6>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
{
  size_t n = print(ifsh);
     306:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN5Print5printEPK19__FlashStringHelper.constprop.7>
     30a:	ec 01       	movw	r28, r24
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
     30c:	80 e5       	ldi	r24, 0x50	; 80
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
     314:	8c 0f       	add	r24, r28
     316:	9d 1f       	adc	r25, r29
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <turnOffPWM.lto_priv.48>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	81 f0       	breq	.+32     	; 0x342 <turnOffPWM.lto_priv.48+0x24>
     322:	28 f4       	brcc	.+10     	; 0x32e <turnOffPWM.lto_priv.48+0x10>
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	99 f0       	breq	.+38     	; 0x34e <turnOffPWM.lto_priv.48+0x30>
     328:	82 30       	cpi	r24, 0x02	; 2
     32a:	a1 f0       	breq	.+40     	; 0x354 <turnOffPWM.lto_priv.48+0x36>
     32c:	08 95       	ret
     32e:	87 30       	cpi	r24, 0x07	; 7
     330:	a9 f0       	breq	.+42     	; 0x35c <turnOffPWM.lto_priv.48+0x3e>
     332:	88 30       	cpi	r24, 0x08	; 8
     334:	b9 f0       	breq	.+46     	; 0x364 <turnOffPWM.lto_priv.48+0x46>
     336:	84 30       	cpi	r24, 0x04	; 4
     338:	d1 f4       	brne	.+52     	; 0x36e <turnOffPWM.lto_priv.48+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     33a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     33e:	8f 7d       	andi	r24, 0xDF	; 223
     340:	03 c0       	rjmp	.+6      	; 0x348 <turnOffPWM.lto_priv.48+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     342:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     346:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     348:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     34c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     34e:	84 b5       	in	r24, 0x24	; 36
     350:	8f 77       	andi	r24, 0x7F	; 127
     352:	02 c0       	rjmp	.+4      	; 0x358 <turnOffPWM.lto_priv.48+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     354:	84 b5       	in	r24, 0x24	; 36
     356:	8f 7d       	andi	r24, 0xDF	; 223
     358:	84 bd       	out	0x24, r24	; 36
     35a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     35c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     360:	8f 77       	andi	r24, 0x7F	; 127
     362:	03 c0       	rjmp	.+6      	; 0x36a <turnOffPWM.lto_priv.48+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     364:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     368:	8f 7d       	andi	r24, 0xDF	; 223
     36a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     36e:	08 95       	ret

00000370 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	fc 01       	movw	r30, r24
     378:	e7 50       	subi	r30, 0x07	; 7
     37a:	ff 4f       	sbci	r31, 0xFF	; 255
     37c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     37e:	fc 01       	movw	r30, r24
     380:	eb 51       	subi	r30, 0x1B	; 27
     382:	ff 4f       	sbci	r31, 0xFF	; 255
     384:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     386:	88 23       	and	r24, r24
     388:	61 f1       	breq	.+88     	; 0x3e2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	fc 01       	movw	r30, r24
     392:	ef 52       	subi	r30, 0x2F	; 47
     394:	ff 4f       	sbci	r31, 0xFF	; 255
     396:	c5 91       	lpm	r28, Z+
     398:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     39a:	fc 01       	movw	r30, r24
     39c:	e9 53       	subi	r30, 0x39	; 57
     39e:	ff 4f       	sbci	r31, 0xFF	; 255
     3a0:	a5 91       	lpm	r26, Z+
     3a2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     3a4:	61 11       	cpse	r22, r1
     3a6:	09 c0       	rjmp	.+18     	; 0x3ba <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     3a8:	9f b7       	in	r25, 0x3f	; 63
                cli();
     3aa:	f8 94       	cli
		*reg &= ~bit;
     3ac:	88 81       	ld	r24, Y
     3ae:	20 95       	com	r18
     3b0:	82 23       	and	r24, r18
     3b2:	88 83       	st	Y, r24
		*out &= ~bit;
     3b4:	ec 91       	ld	r30, X
     3b6:	2e 23       	and	r18, r30
     3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     3ba:	62 30       	cpi	r22, 0x02	; 2
     3bc:	61 f4       	brne	.+24     	; 0x3d6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     3be:	9f b7       	in	r25, 0x3f	; 63
                cli();
     3c0:	f8 94       	cli
		*reg &= ~bit;
     3c2:	88 81       	ld	r24, Y
     3c4:	32 2f       	mov	r19, r18
     3c6:	30 95       	com	r19
     3c8:	83 23       	and	r24, r19
     3ca:	88 83       	st	Y, r24
		*out |= bit;
     3cc:	ec 91       	ld	r30, X
     3ce:	2e 2b       	or	r18, r30
     3d0:	2c 93       	st	X, r18
		SREG = oldSREG;
     3d2:	9f bf       	out	0x3f, r25	; 63
     3d4:	06 c0       	rjmp	.+12     	; 0x3e2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     3d6:	8f b7       	in	r24, 0x3f	; 63
                cli();
     3d8:	f8 94       	cli
		*reg |= bit;
     3da:	e8 81       	ld	r30, Y
     3dc:	2e 2b       	or	r18, r30
     3de:	28 83       	st	Y, r18
		SREG = oldSREG;
     3e0:	8f bf       	out	0x3f, r24	; 63
	}
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <_ZN6tm163711endTransferEv.constprop.33>:
{
  pinMode(dioPin, OUTPUT);
  WAIT;
}

void tm1637::endTransfer()
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
{
	pinMode(dioPin, OUTPUT);
     3f0:	0e e3       	ldi	r16, 0x3E	; 62
     3f2:	12 e0       	ldi	r17, 0x02	; 2
     3f4:	61 e0       	ldi	r22, 0x01	; 1
     3f6:	f8 01       	movw	r30, r16
     3f8:	81 81       	ldd	r24, Z+1	; 0x01
     3fa:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
	

#endif

	// busy wait
	__asm__ __volatile__ (
     3fe:	c0 e6       	ldi	r28, 0x60	; 96
     400:	d0 e0       	ldi	r29, 0x00	; 0
     402:	ce 01       	movw	r24, r28
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	WAIT;
	pinMode(clkPin, INPUT);
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	f8 01       	movw	r30, r16
     40c:	80 81       	ld	r24, Z
     40e:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
     412:	ce 01       	movw	r24, r28
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	WAIT;
	pinMode(dioPin, INPUT);
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	f8 01       	movw	r30, r16
     41c:	81 81       	ldd	r24, Z+1	; 0x01
     41e:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
     422:	21 97       	sbiw	r28, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	WAIT;
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	08 95       	ret

00000430 <_ZN6tm16378sendByteEhb.constprop.32>:

uint8_t tm1637::sendByte(uint8_t b, bool inverted)
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	c8 2f       	mov	r28, r24
{
  uint8_t data;
  if (inverted) {data = (b & 0b01000000); data += (b & 0b00000111) << 3; data += (b & 0b00111000) >> 3;}
     43e:	66 23       	and	r22, r22
     440:	61 f0       	breq	.+24     	; 0x45a <_ZN6tm16378sendByteEhb.constprop.32+0x2a>
     442:	80 74       	andi	r24, 0x40	; 64
     444:	9c 2f       	mov	r25, r28
     446:	97 70       	andi	r25, 0x07	; 7
     448:	28 e0       	ldi	r18, 0x08	; 8
     44a:	92 9f       	mul	r25, r18
     44c:	80 0d       	add	r24, r0
     44e:	11 24       	eor	r1, r1
     450:	c8 73       	andi	r28, 0x38	; 56
     452:	c6 95       	lsr	r28
     454:	c6 95       	lsr	r28
     456:	c6 95       	lsr	r28
     458:	c8 0f       	add	r28, r24
	WAIT;
	pinMode(dioPin, INPUT);
	WAIT;
}

uint8_t tm1637::sendByte(uint8_t b, bool inverted)
     45a:	d8 e0       	ldi	r29, 0x08	; 8
     45c:	90 e6       	ldi	r25, 0x60	; 96
     45e:	e9 2e       	mov	r14, r25
     460:	f1 2c       	mov	r15, r1
  uint8_t data;
  if (inverted) {data = (b & 0b01000000); data += (b & 0b00000111) << 3; data += (b & 0b00111000) >> 3;}
  else data = b;

  for(uint8_t i = 0; i < 8; i++) {
    pinMode(clkPin, OUTPUT);
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <display>
     468:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
     46c:	c7 01       	movw	r24, r14
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	f1 f7       	brne	.-4      	; 0x46e <_ZN6tm16378sendByteEhb.constprop.32+0x3e>
    WAIT;
    if (data & 1) pinMode(dioPin, INPUT);
     472:	c0 ff       	sbrs	r28, 0
     474:	02 c0       	rjmp	.+4      	; 0x47a <_ZN6tm16378sendByteEhb.constprop.32+0x4a>
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	01 c0       	rjmp	.+2      	; 0x47c <_ZN6tm16378sendByteEhb.constprop.32+0x4c>
    else pinMode(dioPin, OUTPUT);
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <display+0x1>
     480:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
     484:	00 e6       	ldi	r16, 0x60	; 96
     486:	10 e0       	ldi	r17, 0x00	; 0
     488:	c7 01       	movw	r24, r14
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <_ZN6tm16378sendByteEhb.constprop.32+0x5a>
    WAIT;
    pinMode(clkPin, INPUT);
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <display>
     494:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
     498:	c7 01       	movw	r24, r14
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <_ZN6tm16378sendByteEhb.constprop.32+0x6a>
    WAIT;
    data = data >> 1;
     49e:	c6 95       	lsr	r28
     4a0:	d1 50       	subi	r29, 0x01	; 1
{
  uint8_t data;
  if (inverted) {data = (b & 0b01000000); data += (b & 0b00000111) << 3; data += (b & 0b00111000) >> 3;}
  else data = b;

  for(uint8_t i = 0; i < 8; i++) {
     4a2:	f9 f6       	brne	.-66     	; 0x462 <_ZN6tm16378sendByteEhb.constprop.32+0x32>
    pinMode(clkPin, INPUT);
    WAIT;
    data = data >> 1;
  }

  pinMode(clkPin, OUTPUT);
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <display>
     4aa:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
  pinMode(dioPin, INPUT);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <display+0x1>
     4b4:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
     4b8:	c8 01       	movw	r24, r16
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <_ZN6tm16378sendByteEhb.constprop.32+0x8a>
  WAIT;

  // DISPLAY_CLK_PIN to high
  pinMode(clkPin, INPUT);
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <display>
     4c4:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
     4c8:	c8 01       	movw	r24, r16
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <_ZN6tm16378sendByteEhb.constprop.32+0x9a>
	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
     4ce:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <display+0x1>
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	f9 01       	movw	r30, r18
     4d6:	e3 5f       	subi	r30, 0xF3	; 243
     4d8:	fe 4f       	sbci	r31, 0xFE	; 254
     4da:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     4dc:	f9 01       	movw	r30, r18
     4de:	e7 50       	subi	r30, 0x07	; 7
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     4e4:	f9 01       	movw	r30, r18
     4e6:	eb 51       	subi	r30, 0x1B	; 27
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     4ec:	cc 23       	and	r28, r28
     4ee:	99 f0       	breq	.+38     	; 0x516 <_ZN6tm16378sendByteEhb.constprop.32+0xe6>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     4f0:	81 11       	cpse	r24, r1
     4f2:	0e 94 8f 01 	call	0x31e	; 0x31e <turnOffPWM.lto_priv.48>

	if (*portInputRegister(port) & bit) return HIGH;
     4f6:	ec 2f       	mov	r30, r28
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	e5 52       	subi	r30, 0x25	; 37
     500:	ff 4f       	sbci	r31, 0xFF	; 255
     502:	a5 91       	lpm	r26, Z+
     504:	b4 91       	lpm	r27, Z
     506:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     508:	e1 23       	and	r30, r17
     50a:	c1 e0       	ldi	r28, 0x01	; 1
     50c:	09 f4       	brne	.+2      	; 0x510 <_ZN6tm16378sendByteEhb.constprop.32+0xe0>
     50e:	c0 e0       	ldi	r28, 0x00	; 0
  WAIT;
  uint8_t reply = digitalRead(dioPin);
  if (reply == 0) pinMode(dioPin, OUTPUT);
     510:	c1 11       	cpse	r28, r1
     512:	07 c0       	rjmp	.+14     	; 0x522 <_ZN6tm16378sendByteEhb.constprop.32+0xf2>
     514:	01 c0       	rjmp	.+2      	; 0x518 <_ZN6tm16378sendByteEhb.constprop.32+0xe8>
     516:	c0 e0       	ldi	r28, 0x00	; 0
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <display+0x1>
     51e:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
     522:	00 e6       	ldi	r16, 0x60	; 96
     524:	10 e0       	ldi	r17, 0x00	; 0
     526:	c8 01       	movw	r24, r16
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <_ZN6tm16378sendByteEhb.constprop.32+0xf8>


  WAIT;
  pinMode(clkPin, OUTPUT);
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <display>
     532:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
     536:	c8 01       	movw	r24, r16
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <_ZN6tm16378sendByteEhb.constprop.32+0x108>
  WAIT;

  return reply;
}
     53c:	8c 2f       	mov	r24, r28
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	08 95       	ret

0000054c <_ZN6tm163713beginTransferEv.constprop.31>:
	setSegments(digits + (4 - length), length, pos);
}

void tm1637::beginTransfer()
{
  pinMode(dioPin, OUTPUT);
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <display+0x1>
     552:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
     556:	80 e6       	ldi	r24, 0x60	; 96
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	f1 f7       	brne	.-4      	; 0x55a <_ZN6tm163713beginTransferEv.constprop.31+0xe>
     55e:	08 95       	ret

00000560 <_ZN6tm163712writeAddressEh.constprop.30>:

  return reply;
}


void tm1637::writeAddress(uint8_t _addr){
     560:	cf 93       	push	r28
     562:	c8 2f       	mov	r28, r24
  beginTransfer();
     564:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN6tm163713beginTransferEv.constprop.31>
  sendByte(COM2 + (_addr & 0x03));
     568:	8c 2f       	mov	r24, r28
     56a:	83 70       	andi	r24, 0x03	; 3
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	80 54       	subi	r24, 0x40	; 64
}
     570:	cf 91       	pop	r28
}


void tm1637::writeAddress(uint8_t _addr){
  beginTransfer();
  sendByte(COM2 + (_addr & 0x03));
     572:	0c 94 18 02 	jmp	0x430	; 0x430 <_ZN6tm16378sendByteEhb.constprop.32>

00000576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>:
  endTransfer();
}



void tm1637::setSegments(const uint8_t _segments[], uint8_t _length, uint8_t _pos)
     576:	cf 92       	push	r12
     578:	df 92       	push	r13
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	8c 01       	movw	r16, r24
{
  _length--;
  
	beginTransfer();
     588:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN6tm163713beginTransferEv.constprop.31>
	sendByte(COM1);
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	0e 94 18 02 	call	0x430	; 0x430 <_ZN6tm16378sendByteEhb.constprop.32>
	endTransfer();
     594:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN6tm163711endTransferEv.constprop.33>

	if (!flipped) writeAddress(_pos);
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN6tm163712writeAddressEh.constprop.30>
     59e:	e8 01       	movw	r28, r16
     5a0:	02 e4       	ldi	r16, 0x42	; 66
     5a2:	12 e0       	ldi	r17, 0x02	; 2
     5a4:	8e e3       	ldi	r24, 0x3E	; 62
     5a6:	e8 2e       	mov	r14, r24
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	f8 2e       	mov	r15, r24
     5ac:	6e 01       	movw	r12, r28
  else writeAddress(3 - _pos - _length);
  
	for (uint8_t k=0; k <= _length; k++)
  {
    lastBytes[k + _pos] = _segments[k];     //Save byte in case refresh is called
     5ae:	88 81       	ld	r24, Y
     5b0:	f8 01       	movw	r30, r16
     5b2:	81 93       	st	Z+, r24
     5b4:	8f 01       	movw	r16, r30
	  if (!flipped) sendByte((_segments[k] & linesForcedLow[k]) | linesForcedHigh[k]);
     5b6:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <display+0x3>
     5ba:	81 11       	cpse	r24, r1
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <_ZN6tm163711setSegmentsEPKhhh.constprop.29+0x54>
     5be:	98 81       	ld	r25, Y
     5c0:	80 85       	ldd	r24, Z+8	; 0x08
     5c2:	89 23       	and	r24, r25
     5c4:	94 81       	ldd	r25, Z+4	; 0x04
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	07 c0       	rjmp	.+14     	; 0x5d8 <_ZN6tm163711setSegmentsEPKhhh.constprop.29+0x62>
    else sendByte((_segments[_length - k] & linesForcedLow[_length - k]) | linesForcedHigh[_length - k], 1);    //NEW 1
     5ca:	f6 01       	movw	r30, r12
     5cc:	93 81       	ldd	r25, Z+3	; 0x03
     5ce:	f7 01       	movw	r30, r14
     5d0:	80 89       	ldd	r24, Z+16	; 0x10
     5d2:	89 23       	and	r24, r25
     5d4:	94 85       	ldd	r25, Z+12	; 0x0c
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	89 2b       	or	r24, r25
     5da:	0e 94 18 02 	call	0x430	; 0x430 <_ZN6tm16378sendByteEhb.constprop.32>
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	f1 e0       	ldi	r31, 0x01	; 1
     5e2:	cf 1a       	sub	r12, r31
     5e4:	d1 08       	sbc	r13, r1
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	e8 1a       	sub	r14, r24
     5ea:	f1 08       	sbc	r15, r1
	endTransfer();

	if (!flipped) writeAddress(_pos);
  else writeAddress(3 - _pos - _length);
  
	for (uint8_t k=0; k <= _length; k++)
     5ec:	e2 e0       	ldi	r30, 0x02	; 2
     5ee:	06 34       	cpi	r16, 0x46	; 70
     5f0:	1e 07       	cpc	r17, r30
     5f2:	e9 f6       	brne	.-70     	; 0x5ae <_ZN6tm163711setSegmentsEPKhhh.constprop.29+0x38>
	  if (!flipped) sendByte((_segments[k] & linesForcedLow[k]) | linesForcedHigh[k]);
    else sendByte((_segments[_length - k] & linesForcedLow[_length - k]) | linesForcedHigh[_length - k], 1);    //NEW 1
  }

	endTransfer();
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
    lastBytes[k + _pos] = _segments[k];     //Save byte in case refresh is called
	  if (!flipped) sendByte((_segments[k] & linesForcedLow[k]) | linesForcedHigh[k]);
    else sendByte((_segments[_length - k] & linesForcedLow[_length - k]) | linesForcedHigh[_length - k], 1);    //NEW 1
  }

	endTransfer();
     604:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_ZN6tm163711endTransferEv.constprop.33>

00000608 <_ZN6tm163713showNumberDecEibhh.constprop.23>:
}



void tm1637::showNumberDec(int num, bool leading_zero, uint8_t length, uint8_t pos)
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	00 d0       	rcall	.+0      	; 0x61c <_ZN6tm163713showNumberDecEibhh.constprop.23+0x14>
     61c:	00 d0       	rcall	.+0      	; 0x61e <_ZN6tm163713showNumberDecEibhh.constprop.23+0x16>
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	8c 01       	movw	r16, r24
     624:	84 e3       	ldi	r24, 0x34	; 52
     626:	e8 2e       	mov	r14, r24
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	f8 2e       	mov	r15, r24
     62c:	fe 01       	movw	r30, r28
     62e:	31 96       	adiw	r30, 0x01	; 1
void tm1637::showNumberDecEx(int num, uint8_t dots, bool leading_zero,
                                    uint8_t length, uint8_t pos)
{
  uint8_t digits[4];
	const static int divisors[] = { 1, 10, 100, 1000 };
	bool leading = true;
     630:	31 e0       	ldi	r19, 0x01	; 1

	for(int8_t k = 0; k < 4; k++) {
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	be 2e       	mov	r11, r30
     636:	4f 2f       	mov	r20, r31
	  int divisor = divisors[3 - k];
     638:	d7 01       	movw	r26, r14
     63a:	de 90       	ld	r13, -X
     63c:	ce 90       	ld	r12, -X
     63e:	7d 01       	movw	r14, r26
		int d = num / divisor;
     640:	c8 01       	movw	r24, r16
     642:	b6 01       	movw	r22, r12
     644:	0e 94 2e 10 	call	0x205c	; 0x205c <__divmodhi4>
    uint8_t digit = 0;

		if (d == 0) {
     648:	61 15       	cp	r22, r1
     64a:	71 05       	cpc	r23, r1
     64c:	29 f4       	brne	.+10     	; 0x658 <_ZN6tm163713showNumberDecEibhh.constprop.23+0x50>
		  if (leading_zero || !leading || (k == 3))
     64e:	33 23       	and	r19, r19
     650:	91 f0       	breq	.+36     	; 0x676 <_ZN6tm163713showNumberDecEibhh.constprop.23+0x6e>
     652:	23 30       	cpi	r18, 0x03	; 3
     654:	91 f4       	brne	.+36     	; 0x67a <_ZN6tm163713showNumberDecEibhh.constprop.23+0x72>
     656:	0f c0       	rjmp	.+30     	; 0x676 <_ZN6tm163713showNumberDecEibhh.constprop.23+0x6e>
		      digit = numberSegment[d];
	      else
		      digit = 0;
		}
		else {
			digit = numberSegment[d];
     658:	db 01       	movw	r26, r22
     65a:	ae 5d       	subi	r26, 0xDE	; 222
     65c:	be 4f       	sbci	r27, 0xFE	; 254
     65e:	8c 91       	ld	r24, X
			num -= d * divisor;
     660:	c6 9e       	mul	r12, r22
     662:	d0 01       	movw	r26, r0
     664:	c7 9e       	mul	r12, r23
     666:	b0 0d       	add	r27, r0
     668:	d6 9e       	mul	r13, r22
     66a:	b0 0d       	add	r27, r0
     66c:	11 24       	eor	r1, r1
     66e:	0a 1b       	sub	r16, r26
     670:	1b 0b       	sbc	r17, r27
			leading = false;
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	03 c0       	rjmp	.+6      	; 0x67c <_ZN6tm163713showNumberDecEibhh.constprop.23+0x74>
		int d = num / divisor;
    uint8_t digit = 0;

		if (d == 0) {
		  if (leading_zero || !leading || (k == 3))
		      digit = numberSegment[d];
     676:	8f e3       	ldi	r24, 0x3F	; 63
     678:	01 c0       	rjmp	.+2      	; 0x67c <_ZN6tm163713showNumberDecEibhh.constprop.23+0x74>
	      else
		      digit = 0;
     67a:	80 e0       	ldi	r24, 0x00	; 0
    
    // Add the decimal point/colon to the digit
    digit |= (dots & 0x80); 
    dots <<= 1;
    
    digits[k] = digit;
     67c:	81 93       	st	Z+, r24
     67e:	2f 5f       	subi	r18, 0xFF	; 255
{
  uint8_t digits[4];
	const static int divisors[] = { 1, 10, 100, 1000 };
	bool leading = true;

	for(int8_t k = 0; k < 4; k++) {
     680:	24 30       	cpi	r18, 0x04	; 4
     682:	d1 f6       	brne	.-76     	; 0x638 <_ZN6tm163713showNumberDecEibhh.constprop.23+0x30>
    dots <<= 1;
    
    digits[k] = digit;
	}

	setSegments(digits + (4 - length), length, pos);
     684:	8b 2d       	mov	r24, r11
     686:	94 2f       	mov	r25, r20
     688:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>


void tm1637::showNumberDec(int num, bool leading_zero, uint8_t length, uint8_t pos)
{
  showNumberDecEx(num, 0, leading_zero, length, pos);
}
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	bf 90       	pop	r11
     6a6:	08 95       	ret

000006a8 <_ZN6tm16377refreshEh.constprop.28>:
  endTransfer();
}



void tm1637::refresh(uint8_t _pos)
     6a8:	cf 93       	push	r28
     6aa:	c8 2f       	mov	r28, r24
{
  if (_pos == 4) setSegments(lastBytes);
     6ac:	84 30       	cpi	r24, 0x04	; 4
     6ae:	29 f4       	brne	.+10     	; 0x6ba <_ZN6tm16377refreshEh.constprop.28+0x12>
     6b0:	82 e4       	ldi	r24, 0x42	; 66
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>
     6b8:	27 c0       	rjmp	.+78     	; 0x708 <_ZN6tm16377refreshEh.constprop.28+0x60>
  else {
    beginTransfer();
     6ba:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN6tm163713beginTransferEv.constprop.31>
    sendByte(COM1);
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	80 e4       	ldi	r24, 0x40	; 64
     6c2:	0e 94 18 02 	call	0x430	; 0x430 <_ZN6tm16378sendByteEhb.constprop.32>
    endTransfer();
     6c6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN6tm163711endTransferEv.constprop.33>
  
    if (flipped) writeAddress(3 - _pos);
     6ca:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <display+0x3>
     6ce:	88 23       	and	r24, r24
     6d0:	19 f0       	breq	.+6      	; 0x6d8 <_ZN6tm16377refreshEh.constprop.28+0x30>
     6d2:	83 e0       	ldi	r24, 0x03	; 3
     6d4:	8c 1b       	sub	r24, r28
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <_ZN6tm16377refreshEh.constprop.28+0x32>
    else writeAddress(_pos);
     6d8:	8c 2f       	mov	r24, r28
     6da:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN6tm163712writeAddressEh.constprop.30>
    
    if (!flipped) sendByte((lastBytes[_pos] & linesForcedLow[_pos]) | linesForcedHigh[_pos]);
     6de:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <display+0x3>
     6e2:	ec 2f       	mov	r30, r28
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	e2 5c       	subi	r30, 0xC2	; 194
     6e8:	fd 4f       	sbci	r31, 0xFD	; 253
     6ea:	94 81       	ldd	r25, Z+4	; 0x04
     6ec:	81 11       	cpse	r24, r1
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <_ZN6tm16377refreshEh.constprop.28+0x52>
     6f0:	85 85       	ldd	r24, Z+13	; 0x0d
     6f2:	89 23       	and	r24, r25
     6f4:	91 85       	ldd	r25, Z+9	; 0x09
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <_ZN6tm16377refreshEh.constprop.28+0x5a>
    else sendByte((lastBytes[_pos] & linesForcedLow[_pos]) | linesForcedHigh[_pos], 1);
     6fa:	85 85       	ldd	r24, Z+13	; 0x0d
     6fc:	89 23       	and	r24, r25
     6fe:	91 85       	ldd	r25, Z+9	; 0x09
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	89 2b       	or	r24, r25
     704:	0e 94 18 02 	call	0x430	; 0x430 <_ZN6tm16378sendByteEhb.constprop.32>

  }
  endTransfer();
}
     708:	cf 91       	pop	r28
    
    if (!flipped) sendByte((lastBytes[_pos] & linesForcedLow[_pos]) | linesForcedHigh[_pos]);
    else sendByte((lastBytes[_pos] & linesForcedLow[_pos]) | linesForcedHigh[_pos], 1);

  }
  endTransfer();
     70a:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_ZN6tm163711endTransferEv.constprop.33>

0000070e <_ZN6tm163714clearLineStateEv.constprop.21>:
  if (_high != 255) linesForcedHigh[_digit] = _high;
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
  refresh(_digit);
}

void tm1637::clearLineState(){
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	ce e3       	ldi	r28, 0x3E	; 62
     718:	d2 e0       	ldi	r29, 0x02	; 2
  for (byte i = 0; i < 4; i++){
     71a:	10 e0       	ldi	r17, 0x00	; 0
    if (linesForcedHigh[i] || linesForcedLow[i] != 127){ linesForcedHigh[i] = 0; linesForcedLow[i] = 127; refresh(i);}
     71c:	0f e7       	ldi	r16, 0x7F	; 127
     71e:	89 85       	ldd	r24, Y+9	; 0x09
     720:	81 11       	cpse	r24, r1
     722:	03 c0       	rjmp	.+6      	; 0x72a <_ZN6tm163714clearLineStateEv.constprop.21+0x1c>
     724:	8d 85       	ldd	r24, Y+13	; 0x0d
     726:	8f 37       	cpi	r24, 0x7F	; 127
     728:	29 f0       	breq	.+10     	; 0x734 <_ZN6tm163714clearLineStateEv.constprop.21+0x26>
     72a:	19 86       	std	Y+9, r1	; 0x09
     72c:	0d 87       	std	Y+13, r16	; 0x0d
     72e:	81 2f       	mov	r24, r17
     730:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
  refresh(_digit);
}

void tm1637::clearLineState(){
  for (byte i = 0; i < 4; i++){
     734:	1f 5f       	subi	r17, 0xFF	; 255
     736:	21 96       	adiw	r28, 0x01	; 1
     738:	14 30       	cpi	r17, 0x04	; 4
     73a:	89 f7       	brne	.-30     	; 0x71e <_ZN6tm163714clearLineStateEv.constprop.21+0x10>
    if (linesForcedHigh[i] || linesForcedLow[i] != 127){ linesForcedHigh[i] = 0; linesForcedLow[i] = 127; refresh(i);}
  }
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     746:	8e 30       	cpi	r24, 0x0E	; 14
     748:	08 f0       	brcs	.+2      	; 0x74c <analogRead+0x6>
     74a:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     74c:	87 70       	andi	r24, 0x07	; 7
     74e:	80 64       	ori	r24, 0x40	; 64
     750:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     754:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     758:	80 64       	ori	r24, 0x40	; 64
     75a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     75e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     762:	86 fd       	sbrc	r24, 6
     764:	fc cf       	rjmp	.-8      	; 0x75e <analogRead+0x18>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     766:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
     76a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     76e:	90 e0       	ldi	r25, 0x00	; 0
}
     770:	92 2b       	or	r25, r18
     772:	08 95       	ret

00000774 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
     774:	8f 92       	push	r8
     776:	9f 92       	push	r9
     778:	af 92       	push	r10
     77a:	bf 92       	push	r11
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     788:	0e 94 bc 00 	call	0x178	; 0x178 <micros>
     78c:	4b 01       	movw	r8, r22
     78e:	5c 01       	movw	r10, r24

	while (ms > 0) {
     790:	c1 14       	cp	r12, r1
     792:	d1 04       	cpc	r13, r1
     794:	e1 04       	cpc	r14, r1
     796:	f1 04       	cpc	r15, r1
     798:	f1 f0       	breq	.+60     	; 0x7d6 <delay+0x62>
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     79a:	0e 94 bc 00 	call	0x178	; 0x178 <micros>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	88 19       	sub	r24, r8
     7a4:	99 09       	sbc	r25, r9
     7a6:	aa 09       	sbc	r26, r10
     7a8:	bb 09       	sbc	r27, r11
     7aa:	88 3e       	cpi	r24, 0xE8	; 232
     7ac:	93 40       	sbci	r25, 0x03	; 3
     7ae:	a1 05       	cpc	r26, r1
     7b0:	b1 05       	cpc	r27, r1
     7b2:	70 f3       	brcs	.-36     	; 0x790 <delay+0x1c>
			ms--;
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	c2 1a       	sub	r12, r18
     7b8:	d1 08       	sbc	r13, r1
     7ba:	e1 08       	sbc	r14, r1
     7bc:	f1 08       	sbc	r15, r1
			start += 1000;
     7be:	88 ee       	ldi	r24, 0xE8	; 232
     7c0:	88 0e       	add	r8, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	98 1e       	adc	r9, r24
     7c6:	a1 1c       	adc	r10, r1
     7c8:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     7ca:	c1 14       	cp	r12, r1
     7cc:	d1 04       	cpc	r13, r1
     7ce:	e1 04       	cpc	r14, r1
     7d0:	f1 04       	cpc	r15, r1
     7d2:	19 f7       	brne	.-58     	; 0x79a <delay+0x26>
     7d4:	dd cf       	rjmp	.-70     	; 0x790 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	bf 90       	pop	r11
     7e0:	af 90       	pop	r10
     7e2:	9f 90       	pop	r9
     7e4:	8f 90       	pop	r8
     7e6:	08 95       	ret

000007e8 <millis>:
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     7e8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     7ea:	f8 94       	cli
	m = timer0_millis;
     7ec:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <timer0_millis>
     7f0:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <timer0_millis+0x1>
     7f4:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <timer0_millis+0x2>
     7f8:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <timer0_millis+0x3>
	SREG = oldSREG;
     7fc:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     7fe:	08 95       	ret

00000800 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	6c 01       	movw	r12, r24
     812:	7a 01       	movw	r14, r20
     814:	8b 01       	movw	r16, r22
  size_t n = 0;
     816:	c0 e0       	ldi	r28, 0x00	; 0
     818:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     81a:	ce 15       	cp	r28, r14
     81c:	df 05       	cpc	r29, r15
     81e:	81 f0       	breq	.+32     	; 0x840 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
     820:	d8 01       	movw	r26, r16
     822:	6d 91       	ld	r22, X+
     824:	8d 01       	movw	r16, r26
     826:	d6 01       	movw	r26, r12
     828:	ed 91       	ld	r30, X+
     82a:	fc 91       	ld	r31, X
     82c:	01 90       	ld	r0, Z+
     82e:	f0 81       	ld	r31, Z
     830:	e0 2d       	mov	r30, r0
     832:	c6 01       	movw	r24, r12
     834:	09 95       	icall
     836:	89 2b       	or	r24, r25
     838:	11 f0       	breq	.+4      	; 0x83e <_ZN5Print5writeEPKhj+0x3e>
     83a:	21 96       	adiw	r28, 0x01	; 1
     83c:	ee cf       	rjmp	.-36     	; 0x81a <_ZN5Print5writeEPKhj+0x1a>
     83e:	7e 01       	movw	r14, r28
    else break;
  }
  return n;
}
     840:	c7 01       	movw	r24, r14
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	08 95       	ret

00000854 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     854:	08 95       	ret

00000856 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	08 95       	ret

0000085c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     85c:	fc 01       	movw	r30, r24
     85e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     860:	44 8d       	ldd	r20, Z+28	; 0x1c
     862:	25 2f       	mov	r18, r21
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	84 2f       	mov	r24, r20
     868:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     86a:	82 1b       	sub	r24, r18
     86c:	93 0b       	sbc	r25, r19
     86e:	54 17       	cp	r21, r20
     870:	10 f0       	brcs	.+4      	; 0x876 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     872:	cf 96       	adiw	r24, 0x3f	; 63
     874:	08 95       	ret
  return tail - head - 1;
     876:	01 97       	sbiw	r24, 0x01	; 1
}
     878:	08 95       	ret

0000087a <_ZN14HardwareSerial4readEv>:
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     87a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     87c:	91 8d       	ldd	r25, Z+25	; 0x19
     87e:	82 8d       	ldd	r24, Z+26	; 0x1a
     880:	98 17       	cp	r25, r24
     882:	61 f0       	breq	.+24     	; 0x89c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     884:	82 8d       	ldd	r24, Z+26	; 0x1a
     886:	df 01       	movw	r26, r30
     888:	a8 0f       	add	r26, r24
     88a:	b1 1d       	adc	r27, r1
     88c:	5d 96       	adiw	r26, 0x1d	; 29
     88e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     890:	92 8d       	ldd	r25, Z+26	; 0x1a
     892:	9f 5f       	subi	r25, 0xFF	; 255
     894:	9f 73       	andi	r25, 0x3F	; 63
     896:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     8a0:	08 95       	ret

000008a2 <_ZN14HardwareSerial4peekEv>:
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     8a2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     8a4:	91 8d       	ldd	r25, Z+25	; 0x19
     8a6:	82 8d       	ldd	r24, Z+26	; 0x1a
     8a8:	98 17       	cp	r25, r24
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     8ac:	82 8d       	ldd	r24, Z+26	; 0x1a
     8ae:	e8 0f       	add	r30, r24
     8b0:	f1 1d       	adc	r31, r1
     8b2:	85 8d       	ldd	r24, Z+29	; 0x1d
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     8bc:	08 95       	ret

000008be <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     8be:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     8c0:	91 8d       	ldd	r25, Z+25	; 0x19
     8c2:	22 8d       	ldd	r18, Z+26	; 0x1a
     8c4:	89 2f       	mov	r24, r25
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	80 5c       	subi	r24, 0xC0	; 192
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	82 1b       	sub	r24, r18
     8ce:	91 09       	sbc	r25, r1
}
     8d0:	8f 73       	andi	r24, 0x3F	; 63
     8d2:	99 27       	eor	r25, r25
     8d4:	08 95       	ret

000008d6 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     8d6:	81 ea       	ldi	r24, 0xA1	; 161
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN14HardwareSerial9availableEv>
     8de:	21 e0       	ldi	r18, 0x01	; 1
     8e0:	89 2b       	or	r24, r25
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <_Z17Serial0_availablev+0x10>
     8e4:	20 e0       	ldi	r18, 0x00	; 0
}
     8e6:	82 2f       	mov	r24, r18
     8e8:	08 95       	ret

000008ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     8ea:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     8ec:	84 8d       	ldd	r24, Z+28	; 0x1c
     8ee:	df 01       	movw	r26, r30
     8f0:	a8 0f       	add	r26, r24
     8f2:	b1 1d       	adc	r27, r1
     8f4:	a3 5a       	subi	r26, 0xA3	; 163
     8f6:	bf 4f       	sbci	r27, 0xFF	; 255
     8f8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     8fa:	84 8d       	ldd	r24, Z+28	; 0x1c
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	8f 73       	andi	r24, 0x3F	; 63
     902:	99 27       	eor	r25, r25
     904:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     906:	a6 89       	ldd	r26, Z+22	; 0x16
     908:	b7 89       	ldd	r27, Z+23	; 0x17
     90a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     90c:	a0 89       	ldd	r26, Z+16	; 0x10
     90e:	b1 89       	ldd	r27, Z+17	; 0x11
     910:	8c 91       	ld	r24, X
     912:	83 70       	andi	r24, 0x03	; 3
     914:	80 64       	ori	r24, 0x40	; 64
     916:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     918:	93 8d       	ldd	r25, Z+27	; 0x1b
     91a:	84 8d       	ldd	r24, Z+28	; 0x1c
     91c:	98 13       	cpse	r25, r24
     91e:	06 c0       	rjmp	.+12     	; 0x92c <__stack+0x2d>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     920:	02 88       	ldd	r0, Z+18	; 0x12
     922:	f3 89       	ldd	r31, Z+19	; 0x13
     924:	e0 2d       	mov	r30, r0
     926:	80 81       	ld	r24, Z
     928:	8f 7d       	andi	r24, 0xDF	; 223
     92a:	80 83       	st	Z, r24
     92c:	08 95       	ret

0000092e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
  _written = true;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     940:	9b 8d       	ldd	r25, Y+27	; 0x1b
     942:	8c 8d       	ldd	r24, Y+28	; 0x1c
     944:	98 13       	cpse	r25, r24
     946:	05 c0       	rjmp	.+10     	; 0x952 <_ZN14HardwareSerial5writeEh+0x24>
     948:	e8 89       	ldd	r30, Y+16	; 0x10
     94a:	f9 89       	ldd	r31, Y+17	; 0x11
     94c:	80 81       	ld	r24, Z
     94e:	85 fd       	sbrc	r24, 5
     950:	26 c0       	rjmp	.+76     	; 0x99e <_ZN14HardwareSerial5writeEh+0x70>
     952:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     954:	0b 8d       	ldd	r16, Y+27	; 0x1b
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	0f 5f       	subi	r16, 0xFF	; 255
     95a:	1f 4f       	sbci	r17, 0xFF	; 255
     95c:	0f 73       	andi	r16, 0x3F	; 63
     95e:	11 27       	eor	r17, r17
     960:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     962:	8c 8d       	ldd	r24, Y+28	; 0x1c
     964:	e8 12       	cpse	r14, r24
     966:	0c c0       	rjmp	.+24     	; 0x980 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	07 fc       	sbrc	r0, 7
     96c:	fa cf       	rjmp	.-12     	; 0x962 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     96e:	e8 89       	ldd	r30, Y+16	; 0x10
     970:	f9 89       	ldd	r31, Y+17	; 0x11
     972:	80 81       	ld	r24, Z
     974:	85 ff       	sbrs	r24, 5
     976:	f5 cf       	rjmp	.-22     	; 0x962 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     978:	ce 01       	movw	r24, r28
     97a:	0e 94 75 04 	call	0x8ea	; 0x8ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     97e:	f1 cf       	rjmp	.-30     	; 0x962 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     980:	8b 8d       	ldd	r24, Y+27	; 0x1b
     982:	fe 01       	movw	r30, r28
     984:	e8 0f       	add	r30, r24
     986:	f1 1d       	adc	r31, r1
     988:	e3 5a       	subi	r30, 0xA3	; 163
     98a:	ff 4f       	sbci	r31, 0xFF	; 255
     98c:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     98e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     990:	f8 94       	cli
    _tx_buffer_head = i;
     992:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     994:	ea 89       	ldd	r30, Y+18	; 0x12
     996:	fb 89       	ldd	r31, Y+19	; 0x13
     998:	80 81       	ld	r24, Z
     99a:	80 62       	ori	r24, 0x20	; 32
     99c:	0a c0       	rjmp	.+20     	; 0x9b2 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     99e:	9f b7       	in	r25, 0x3f	; 63
     9a0:	f8 94       	cli
      *_udr = c;
     9a2:	ee 89       	ldd	r30, Y+22	; 0x16
     9a4:	ff 89       	ldd	r31, Y+23	; 0x17
     9a6:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     9a8:	e8 89       	ldd	r30, Y+16	; 0x10
     9aa:	f9 89       	ldd	r31, Y+17	; 0x11
     9ac:	80 81       	ld	r24, Z
     9ae:	83 70       	andi	r24, 0x03	; 3
     9b0:	80 64       	ori	r24, 0x40	; 64
     9b2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     9b4:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	08 95       	ret

000009c8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     9ce:	88 8d       	ldd	r24, Y+24	; 0x18
     9d0:	88 23       	and	r24, r24
     9d2:	c9 f0       	breq	.+50     	; 0xa06 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     9d4:	ea 89       	ldd	r30, Y+18	; 0x12
     9d6:	fb 89       	ldd	r31, Y+19	; 0x13
     9d8:	80 81       	ld	r24, Z
     9da:	85 fd       	sbrc	r24, 5
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <_ZN14HardwareSerial5flushEv+0x20>
     9de:	a8 89       	ldd	r26, Y+16	; 0x10
     9e0:	b9 89       	ldd	r27, Y+17	; 0x11
     9e2:	8c 91       	ld	r24, X
     9e4:	86 fd       	sbrc	r24, 6
     9e6:	0f c0       	rjmp	.+30     	; 0xa06 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	07 fc       	sbrc	r0, 7
     9ec:	f5 cf       	rjmp	.-22     	; 0x9d8 <_ZN14HardwareSerial5flushEv+0x10>
     9ee:	80 81       	ld	r24, Z
     9f0:	85 ff       	sbrs	r24, 5
     9f2:	f2 cf       	rjmp	.-28     	; 0x9d8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     9f4:	a8 89       	ldd	r26, Y+16	; 0x10
     9f6:	b9 89       	ldd	r27, Y+17	; 0x11
     9f8:	8c 91       	ld	r24, X
     9fa:	85 ff       	sbrs	r24, 5
     9fc:	ed cf       	rjmp	.-38     	; 0x9d8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     9fe:	ce 01       	movw	r24, r28
     a00:	0e 94 75 04 	call	0x8ea	; 0x8ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a04:	e7 cf       	rjmp	.-50     	; 0x9d4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	89 2b       	or	r24, r25
     a12:	29 f0       	breq	.+10     	; 0xa1e <_Z14serialEventRunv+0x12>
     a14:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_Z17Serial0_availablev>
     a18:	81 11       	cpse	r24, r1
     a1a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     a1e:	08 95       	ret

00000a20 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     a20:	0e 94 98 10 	call	0x2130	; 0x2130 <abort>

00000a24 <_ZN11EEPROMClass5writeEih.isra.1>:
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     a24:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <eeprom_write_byte>

00000a28 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     a4a:	81 ea       	ldi	r24, 0xA1	; 161
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	0e 94 75 04 	call	0x8ea	; 0x8ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	7f 91       	pop	r23
     a60:	6f 91       	pop	r22
     a62:	5f 91       	pop	r21
     a64:	4f 91       	pop	r20
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	2f 93       	push	r18
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	ef 93       	push	r30
     a86:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     a88:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <Serial+0x10>
     a8c:	f0 91 b2 01 	lds	r31, 0x01B2	; 0x8001b2 <Serial+0x11>
     a90:	80 81       	ld	r24, Z
     a92:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <Serial+0x16>
     a96:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <Serial+0x17>
     a9a:	82 fd       	sbrc	r24, 2
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     a9e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     aa0:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <Serial+0x19>
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
     aa6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     aa8:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <Serial+0x1a>
     aac:	82 17       	cp	r24, r18
     aae:	51 f0       	breq	.+20     	; 0xac4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     ab0:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <Serial+0x19>
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	ef 55       	subi	r30, 0x5F	; 95
     ab8:	fe 4f       	sbci	r31, 0xFE	; 254
     aba:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     abc:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <Serial+0x19>
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     ac2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     ac4:	ff 91       	pop	r31
     ac6:	ef 91       	pop	r30
     ac8:	9f 91       	pop	r25
     aca:	8f 91       	pop	r24
     acc:	2f 91       	pop	r18
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <_ZN11EEPROMClass4readEi.isra.0.lto_priv.47>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     ad8:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <eeprom_read_byte>

00000adc <_Z17recordPerformancev>:
void recordPerformance(){
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
 int e;
  e = 0;
     ae0:	c0 e0       	ldi	r28, 0x00	; 0
     ae2:	d0 e0       	ldi	r29, 0x00	; 0
     ae4:	ce 01       	movw	r24, r28
     ae6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <eeprom_read_byte>
  while (e != -1 && EEPROM.read(e) && EEPROM.read(e) != 255){
     aea:	81 50       	subi	r24, 0x01	; 1
     aec:	8e 3f       	cpi	r24, 0xFE	; 254
     aee:	30 f4       	brcc	.+12     	; 0xafc <_Z17recordPerformancev+0x20>
    if (e + 6 > EEPROM.length()) e = -1;
     af0:	cc 3f       	cpi	r28, 0xFC	; 252
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	d8 07       	cpc	r29, r24
     af6:	61 f1       	breq	.+88     	; 0xb50 <_Z17recordPerformancev+0x74>
    else e += 5;
     af8:	25 96       	adiw	r28, 0x05	; 5
     afa:	f4 cf       	rjmp	.-24     	; 0xae4 <_Z17recordPerformancev+0x8>
  }

  if (e != -1) {
    EEPROM.write(e, menuPosition + 1);
     afc:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <menuPosition>
     b00:	6f 5f       	subi	r22, 0xFF	; 255
     b02:	ce 01       	movw	r24, r28
     b04:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN11EEPROMClass5writeEih.isra.1>
    EEPROM.write(e+1, (highVolt >> 8));
     b08:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <__data_end+0x1>
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN11EEPROMClass5writeEih.isra.1>
    EEPROM.write(e+2, (highVolt & 255));
     b14:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <__data_end>
     b18:	ce 01       	movw	r24, r28
     b1a:	02 96       	adiw	r24, 0x02	; 2
     b1c:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN11EEPROMClass5writeEih.isra.1>
    EEPROM.write(e+3, (nextVolt >> 8));
     b20:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <nextVolt>
     b24:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <nextVolt+0x1>
     b28:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <nextVolt+0x2>
     b2c:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <nextVolt+0x3>
     b30:	69 2f       	mov	r22, r25
     b32:	7a 2f       	mov	r23, r26
     b34:	8b 2f       	mov	r24, r27
     b36:	99 27       	eor	r25, r25
     b38:	ce 01       	movw	r24, r28
     b3a:	03 96       	adiw	r24, 0x03	; 3
     b3c:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN11EEPROMClass5writeEih.isra.1>
    EEPROM.write(e+4, (nextVolt & 255));
     b40:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <nextVolt>
     b44:	ce 01       	movw	r24, r28
     b46:	04 96       	adiw	r24, 0x04	; 4
  }
}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
  if (e != -1) {
    EEPROM.write(e, menuPosition + 1);
    EEPROM.write(e+1, (highVolt >> 8));
    EEPROM.write(e+2, (highVolt & 255));
    EEPROM.write(e+3, (nextVolt >> 8));
    EEPROM.write(e+4, (nextVolt & 255));
     b4c:	0c 94 12 05 	jmp	0xa24	; 0xa24 <_ZN11EEPROMClass5writeEih.isra.1>
  }
}
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <_Z7readBtnv>:
  }
  else _inLast = _in;
  return 0;
}

uint8_t readBtn(){  //Return 1 if short pressed & released, Return 2 if long pressed PRIOR to release
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
  static unsigned long debounceTimer;
  static byte buttonPos;
    if (BUTTON_PRESSED && millis() > debounceTimer){   //Button depressed
     b5c:	34 99       	sbic	0x06, 4	; 6
     b5e:	0f c0       	rjmp	.+30     	; 0xb7e <_Z7readBtnv+0x28>
     b60:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
     b64:	00 91 50 02 	lds	r16, 0x0250	; 0x800250 <_ZZ7readBtnvE13debounceTimer>
     b68:	10 91 51 02 	lds	r17, 0x0251	; 0x800251 <_ZZ7readBtnvE13debounceTimer+0x1>
     b6c:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <_ZZ7readBtnvE13debounceTimer+0x2>
     b70:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <_ZZ7readBtnvE13debounceTimer+0x3>
     b74:	06 17       	cp	r16, r22
     b76:	17 07       	cpc	r17, r23
     b78:	28 07       	cpc	r18, r24
     b7a:	39 07       	cpc	r19, r25
     b7c:	58 f0       	brcs	.+22     	; 0xb94 <_Z7readBtnv+0x3e>
      if (!buttonPos){ buttonPos = 1; debounceTimer = millis() + BUTTON_LONGHOLD;}
      else if (buttonPos == 1){buttonPos = 2; return 2;}
    }
    else if (buttonPos && !(BUTTON_PRESSED)) {
     b7e:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <_ZZ7readBtnvE9buttonPos>
     b82:	cc 23       	and	r28, r28
     b84:	29 f0       	breq	.+10     	; 0xb90 <_Z7readBtnv+0x3a>
     b86:	34 99       	sbic	0x06, 4	; 6
     b88:	24 c0       	rjmp	.+72     	; 0xbd2 <_Z7readBtnv+0x7c>
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <_Z7readBtnv+0x3a>
      debounceTimer = millis() + BUTTON_DEBOUNCE;
      if (buttonPos == 1) {buttonPos = 0; return 1;}
      buttonPos = 0;
     b8c:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <_ZZ7readBtnvE9buttonPos>
    }
    return 0;
     b90:	c0 e0       	ldi	r28, 0x00	; 0
     b92:	33 c0       	rjmp	.+102    	; 0xbfa <_Z7readBtnv+0xa4>

uint8_t readBtn(){  //Return 1 if short pressed & released, Return 2 if long pressed PRIOR to release
  static unsigned long debounceTimer;
  static byte buttonPos;
    if (BUTTON_PRESSED && millis() > debounceTimer){   //Button depressed
      if (!buttonPos){ buttonPos = 1; debounceTimer = millis() + BUTTON_LONGHOLD;}
     b94:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <_ZZ7readBtnvE9buttonPos>
     b98:	c1 11       	cpse	r28, r1
     b9a:	14 c0       	rjmp	.+40     	; 0xbc4 <_Z7readBtnv+0x6e>
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <_ZZ7readBtnvE9buttonPos>
     ba2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	84 54       	subi	r24, 0x44	; 68
     bac:	9d 4f       	sbci	r25, 0xFD	; 253
     bae:	af 4f       	sbci	r26, 0xFF	; 255
     bb0:	bf 4f       	sbci	r27, 0xFF	; 255
     bb2:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <_ZZ7readBtnvE13debounceTimer>
     bb6:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <_ZZ7readBtnvE13debounceTimer+0x1>
     bba:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <_ZZ7readBtnvE13debounceTimer+0x2>
     bbe:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <_ZZ7readBtnvE13debounceTimer+0x3>
     bc2:	1b c0       	rjmp	.+54     	; 0xbfa <_Z7readBtnv+0xa4>
      else if (buttonPos == 1){buttonPos = 2; return 2;}
     bc4:	c1 30       	cpi	r28, 0x01	; 1
     bc6:	21 f7       	brne	.-56     	; 0xb90 <_Z7readBtnv+0x3a>
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <_ZZ7readBtnvE9buttonPos>
     bce:	c2 e0       	ldi	r28, 0x02	; 2
     bd0:	14 c0       	rjmp	.+40     	; 0xbfa <_Z7readBtnv+0xa4>
    }
    else if (buttonPos && !(BUTTON_PRESSED)) {
      debounceTimer = millis() + BUTTON_DEBOUNCE;
     bd2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
     bd6:	dc 01       	movw	r26, r24
     bd8:	cb 01       	movw	r24, r22
     bda:	8a 56       	subi	r24, 0x6A	; 106
     bdc:	9f 4f       	sbci	r25, 0xFF	; 255
     bde:	af 4f       	sbci	r26, 0xFF	; 255
     be0:	bf 4f       	sbci	r27, 0xFF	; 255
     be2:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <_ZZ7readBtnvE13debounceTimer>
     be6:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <_ZZ7readBtnvE13debounceTimer+0x1>
     bea:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <_ZZ7readBtnvE13debounceTimer+0x2>
     bee:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <_ZZ7readBtnvE13debounceTimer+0x3>
      if (buttonPos == 1) {buttonPos = 0; return 1;}
     bf2:	c1 30       	cpi	r28, 0x01	; 1
     bf4:	59 f6       	brne	.-106    	; 0xb8c <_Z7readBtnv+0x36>
     bf6:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <_ZZ7readBtnvE9buttonPos>
      buttonPos = 0;
    }
    return 0;
}
     bfa:	8c 2f       	mov	r24, r28
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	8f 93       	push	r24
     c14:	9f 93       	push	r25
     c16:	af 93       	push	r26
     c18:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     c1a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <timer0_millis>
     c1e:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <timer0_millis+0x1>
     c22:	a0 91 9b 01 	lds	r26, 0x019B	; 0x80019b <timer0_millis+0x2>
     c26:	b0 91 9c 01 	lds	r27, 0x019C	; 0x80019c <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     c2a:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     c2e:	26 e0       	ldi	r18, 0x06	; 6
     c30:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     c32:	2d 37       	cpi	r18, 0x7D	; 125
     c34:	20 f4       	brcc	.+8      	; 0xc3e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     c36:	02 96       	adiw	r24, 0x02	; 2
     c38:	a1 1d       	adc	r26, r1
     c3a:	b1 1d       	adc	r27, r1
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     c3e:	29 e8       	ldi	r18, 0x89	; 137
     c40:	23 0f       	add	r18, r19
		m += 1;
     c42:	03 96       	adiw	r24, 0x03	; 3
     c44:	a1 1d       	adc	r26, r1
     c46:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     c48:	20 93 54 02 	sts	0x0254, r18	; 0x800254 <timer0_fract>
	timer0_millis = m;
     c4c:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <timer0_millis>
     c50:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <timer0_millis+0x1>
     c54:	a0 93 9b 01 	sts	0x019B, r26	; 0x80019b <timer0_millis+0x2>
     c58:	b0 93 9c 01 	sts	0x019C, r27	; 0x80019c <timer0_millis+0x3>
	timer0_overflow_count++;
     c5c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <timer0_overflow_count>
     c60:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <timer0_overflow_count+0x1>
     c64:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <timer0_overflow_count+0x2>
     c68:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <timer0_overflow_count+0x3>
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	a1 1d       	adc	r26, r1
     c70:	b1 1d       	adc	r27, r1
     c72:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <timer0_overflow_count>
     c76:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <timer0_overflow_count+0x1>
     c7a:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <timer0_overflow_count+0x2>
     c7e:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <timer0_overflow_count+0x3>
}
     c82:	bf 91       	pop	r27
     c84:	af 91       	pop	r26
     c86:	9f 91       	pop	r25
     c88:	8f 91       	pop	r24
     c8a:	3f 91       	pop	r19
     c8c:	2f 91       	pop	r18
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <main>:

void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	ac 97       	sbiw	r28, 0x2c	; 44
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     cac:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     cae:	84 b5       	in	r24, 0x24	; 36
     cb0:	82 60       	ori	r24, 0x02	; 2
     cb2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     cb4:	84 b5       	in	r24, 0x24	; 36
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     cba:	85 b5       	in	r24, 0x25	; 37
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     cc0:	85 b5       	in	r24, 0x25	; 37
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     cc6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     cca:	81 60       	ori	r24, 0x01	; 1
     ccc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     cd0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     cd4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     cde:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ce2:	81 60       	ori	r24, 0x01	; 1
     ce4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ce8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     cec:	81 60       	ori	r24, 0x01	; 1
     cee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     cf2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     cf6:	84 60       	ori	r24, 0x04	; 4
     cf8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     cfc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     d00:	81 60       	ori	r24, 0x01	; 1
     d02:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
     d06:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     d0a:	84 60       	ori	r24, 0x04	; 4
     d0c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS1);
     d10:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     d14:	82 60       	ori	r24, 0x02	; 2
     d16:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		cbi(ADCSRA, ADPS0);
     d1a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     d1e:	8e 7f       	andi	r24, 0xFE	; 254
     d20:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     d24:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     d28:	80 68       	ori	r24, 0x80	; 128
     d2a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     d2e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
unsigned long nextVolt;
unsigned int lowVolt;

void setup() {
//GPIO Setup
  pinMode(FLASH_PIN, OUTPUT);
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	88 e0       	ldi	r24, 0x08	; 8
     d36:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
     d3a:	e5 e1       	ldi	r30, 0x15	; 21
     d3c:	f1 e0       	ldi	r31, 0x01	; 1
     d3e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     d40:	e1 e0       	ldi	r30, 0x01	; 1
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	04 91       	lpm	r16, Z
	uint8_t port = digitalPinToPort(pin);
     d46:	ed ee       	ldi	r30, 0xED	; 237
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	14 91       	lpm	r17, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     d4c:	11 23       	and	r17, r17
     d4e:	91 f0       	breq	.+36     	; 0xd74 <main+0xdc>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     d50:	81 11       	cpse	r24, r1
     d52:	0e 94 8f 01 	call	0x31e	; 0x31e <turnOffPWM.lto_priv.48>

	out = portOutputRegister(port);
     d56:	e1 2f       	mov	r30, r17
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	e9 53       	subi	r30, 0x39	; 57
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	a5 91       	lpm	r26, Z+
     d64:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     d66:	9f b7       	in	r25, 0x3f	; 63
	cli();
     d68:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     d6a:	8c 91       	ld	r24, X
     d6c:	00 95       	com	r16
     d6e:	08 23       	and	r16, r24
     d70:	0c 93       	st	X, r16
	} else {
		*out |= bit;
	}

	SREG = oldSREG;
     d72:	9f bf       	out	0x3f, r25	; 63
  digitalWrite(FLASH_PIN, 0);
  HIGH_VOLT_OFF;
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	85 e0       	ldi	r24, 0x05	; 5
     d78:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
  pinMode(ENCODER_B_PIN, INPUT_PULLUP);
     d7c:	62 e0       	ldi	r22, 0x02	; 2
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
  pinMode(ENCODER_A_PIN, INPUT_PULLUP);
     d84:	62 e0       	ldi	r22, 0x02	; 2
     d86:	83 e1       	ldi	r24, 0x13	; 19
     d88:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
  pinMode(BUTTON_PIN, INPUT_PULLUP);
     d8c:	62 e0       	ldi	r22, 0x02	; 2
     d8e:	82 e1       	ldi	r24, 0x12	; 18
     d90:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
  pinMode(HIGH_VOLT_IN_ANALOG, INPUT);
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	8f e0       	ldi	r24, 0x0F	; 15
     d98:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
  pinMode(HIGH_VOLT_OUT_ANALOG, INPUT);
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	8e e0       	ldi	r24, 0x0E	; 14
     da0:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
  pinMode(INPUT_VOLT_ANALOG, INPUT);
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	80 e1       	ldi	r24, 0x10	; 16
     da8:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
  lowVolt = analogRead(INPUT_VOLT_ANALOG) * 20;
     dac:	80 e1       	ldi	r24, 0x10	; 16
     dae:	0e 94 a3 03 	call	0x746	; 0x746 <analogRead>
     db2:	24 e1       	ldi	r18, 0x14	; 20
     db4:	ac 01       	movw	r20, r24
     db6:	24 9f       	mul	r18, r20
     db8:	c0 01       	movw	r24, r0
     dba:	25 9f       	mul	r18, r21
     dbc:	90 0d       	add	r25, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <lowVolt+0x1>
     dc4:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <lowVolt>
  pinMode(TRIGGER_PIN, INPUT_PULLUP);
     dc8:	62 e0       	ldi	r22, 0x02	; 2
     dca:	81 e1       	ldi	r24, 0x11	; 17
     dcc:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>

//Display
  display.setSegments(TXT_all);
     dd0:	86 e1       	ldi	r24, 0x16	; 22
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>
  refresh();
}

void tm1637::setBrightness(uint8_t _b, uint8_t _on)
{
	brightness = (_b & 0b00000111) | ((_on & 1) << 3);
     dd8:	8f e0       	ldi	r24, 0x0F	; 15
     dda:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <display+0x2>
  beginTransfer();
     dde:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN6tm163713beginTransferEv.constprop.31>
  sendByte(COM3 + (brightness & 0b00001111));
     de2:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <display+0x2>
     de6:	8f 70       	andi	r24, 0x0F	; 15
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	80 58       	subi	r24, 0x80	; 128
     dec:	0e 94 18 02 	call	0x430	; 0x430 <_ZN6tm16378sendByteEhb.constprop.32>
  endTransfer();
     df0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN6tm163711endTransferEv.constprop.33>
  }
}

void tm1637::flipDisplay(uint8_t _inv){
  if (_inv) _inv = 1;
  flipped = _inv;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <display+0x3>
  refresh();
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
  display.setBrightness(7);
  display.flipDisplay(1);
  REFRESH_DISPLAY;
     e00:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menuPosition>
     e04:	80 68       	ori	r24, 0x80	; 128
     e06:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <menuPosition>

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     e0a:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <Serial+0x10>
     e0e:	f0 91 b2 01 	lds	r31, 0x01B2	; 0x8001b2 <Serial+0x11>
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	80 83       	st	Z, r24
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     e16:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <Serial+0xc>
     e1a:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <Serial+0xd>
     e1e:	10 82       	st	Z, r1
  *_ubrrl = baud_setting;
     e20:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <Serial+0xe>
     e24:	f0 91 b0 01 	lds	r31, 0x01B0	; 0x8001b0 <Serial+0xf>
     e28:	87 e6       	ldi	r24, 0x67	; 103
     e2a:	80 83       	st	Z, r24

  _written = false;
     e2c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <Serial+0x18>

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     e30:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <Serial+0x14>
     e34:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <Serial+0x15>
     e38:	86 e0       	ldi	r24, 0x06	; 6
     e3a:	80 83       	st	Z, r24
  
  sbi(*_ucsrb, RXEN0);
     e3c:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <Serial+0x12>
     e40:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <Serial+0x13>
     e44:	80 81       	ld	r24, Z
     e46:	80 61       	ori	r24, 0x10	; 16
     e48:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     e4a:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <Serial+0x12>
     e4e:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <Serial+0x13>
     e52:	80 81       	ld	r24, Z
     e54:	88 60       	ori	r24, 0x08	; 8
     e56:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     e58:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <Serial+0x12>
     e5c:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <Serial+0x13>
     e60:	80 81       	ld	r24, Z
     e62:	80 68       	ori	r24, 0x80	; 128
     e64:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     e66:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <Serial+0x12>
     e6a:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <Serial+0x13>
     e6e:	80 81       	ld	r24, Z
     e70:	8f 7d       	andi	r24, 0xDF	; 223
     e72:	80 83       	st	Z, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     e74:	86 e4       	ldi	r24, 0x46	; 70
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
     e7c:	80 e5       	ldi	r24, 0x50	; 80
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>

void runDisplay(){
  static unsigned long _timer = 0;
  static byte _menuPosition;
  static byte _switch;
          byte txt500[4] = {0b00111111, 0b01101101, 0b00111110, 0b00101101};
     e84:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <menuPosition+0x1>
     e88:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <menuPosition+0x2>
     e8c:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <menuPosition+0x3>
     e90:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <menuPosition+0x4>
     e94:	8f 8b       	std	Y+23, r24	; 0x17
     e96:	98 8f       	std	Y+24, r25	; 0x18
     e98:	a9 8f       	std	Y+25, r26	; 0x19
     e9a:	ba 8f       	std	Y+26, r27	; 0x1a
          byte txt1000[4] = {0b00000110, 0, 0b00111110, 0b00101101};
     e9c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menuPosition+0x5>
     ea0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <menuPosition+0x6>
     ea4:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <menuPosition+0x7>
     ea8:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <menuPosition+0x8>
     eac:	8b 8f       	std	Y+27, r24	; 0x1b
     eae:	9c 8f       	std	Y+28, r25	; 0x1c
     eb0:	ad 8f       	std	Y+29, r26	; 0x1d
     eb2:	be 8f       	std	Y+30, r27	; 0x1e
          byte txt2000[4] = {0b01011011, 0, 0b00111110, 0b00101101};
     eb4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <menuPosition+0x9>
     eb8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <menuPosition+0xa>
     ebc:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <menuPosition+0xb>
     ec0:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <menuPosition+0xc>
     ec4:	8f 8f       	std	Y+31, r24	; 0x1f
     ec6:	98 a3       	std	Y+32, r25	; 0x20
     ec8:	a9 a3       	std	Y+33, r26	; 0x21
     eca:	ba a3       	std	Y+34, r27	; 0x22
          byte txt4000[4] = {0b01100110, 0, 0b00111110, 0b00101101};
     ecc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <menuPosition+0xd>
     ed0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <menuPosition+0xe>
     ed4:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <menuPosition+0xf>
     ed8:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <menuPosition+0x10>
     edc:	8b a3       	std	Y+35, r24	; 0x23
     ede:	9c a3       	std	Y+36, r25	; 0x24
     ee0:	ad a3       	std	Y+37, r26	; 0x25
     ee2:	be a3       	std	Y+38, r27	; 0x26
          while (millis() < _t && BUTTON_NOT_PRESSED){};
          float _c;
          _c = (nextVolt - highVolt) / 8;
          _c *= CAPACITANCE_UF;
          _c *= 2;
          byte x[4] = {1, 2, 4, 8};
     ee4:	80 90 12 01 	lds	r8, 0x0112	; 0x800112 <menuPosition+0x11>
     ee8:	90 90 13 01 	lds	r9, 0x0113	; 0x800113 <menuPosition+0x12>
     eec:	b0 90 14 01 	lds	r11, 0x0114	; 0x800114 <menuPosition+0x13>
     ef0:	a0 90 15 01 	lds	r10, 0x0115	; 0x800115 <menuPosition+0x14>
        recordPerformance();
          float _c;
          _c = (nextVolt - highVolt) / 8;
          _c *= CAPACITANCE_UF;
          _c *= 2;
          byte x[4] = {1, 2, 4, 8};
     ef4:	8f a2       	std	Y+39, r8	; 0x27
     ef6:	98 a6       	std	Y+40, r9	; 0x28
     ef8:	b9 a6       	std	Y+41, r11	; 0x29
     efa:	aa a6       	std	Y+42, r10	; 0x2a
    Serial.print(_t);
    Serial.print(F("   Current: "));
    _c = _c - float(_t / 8);
    _c /= CAPACITANCE_UF;
    _c *= 2;
    byte x[4] = {1, 2, 4, 8};
     efc:	8b a6       	std	Y+43, r8	; 0x2b
     efe:	9c a6       	std	Y+44, r9	; 0x2c
     f00:	2b 2c       	mov	r2, r11
     f02:	3a 2c       	mov	r3, r10

void runDisplay(){
  static unsigned long _timer = 0;
  static byte _menuPosition;
  static byte _switch;
          byte txt500[4] = {0b00111111, 0b01101101, 0b00111110, 0b00101101};
     f04:	8f 89       	ldd	r24, Y+23	; 0x17
     f06:	98 8d       	ldd	r25, Y+24	; 0x18
     f08:	a9 8d       	ldd	r26, Y+25	; 0x19
     f0a:	ba 8d       	ldd	r27, Y+26	; 0x1a
     f0c:	8d 87       	std	Y+13, r24	; 0x0d
     f0e:	9e 87       	std	Y+14, r25	; 0x0e
     f10:	af 87       	std	Y+15, r26	; 0x0f
     f12:	b8 8b       	std	Y+16, r27	; 0x10
          byte txt1000[4] = {0b00000110, 0, 0b00111110, 0b00101101};
     f14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f18:	ad 8d       	ldd	r26, Y+29	; 0x1d
     f1a:	be 8d       	ldd	r27, Y+30	; 0x1e
     f1c:	89 87       	std	Y+9, r24	; 0x09
     f1e:	9a 87       	std	Y+10, r25	; 0x0a
     f20:	ab 87       	std	Y+11, r26	; 0x0b
     f22:	bc 87       	std	Y+12, r27	; 0x0c
          byte txt2000[4] = {0b01011011, 0, 0b00111110, 0b00101101};
     f24:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f26:	98 a1       	ldd	r25, Y+32	; 0x20
     f28:	a9 a1       	ldd	r26, Y+33	; 0x21
     f2a:	ba a1       	ldd	r27, Y+34	; 0x22
     f2c:	8d 83       	std	Y+5, r24	; 0x05
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	af 83       	std	Y+7, r26	; 0x07
     f32:	b8 87       	std	Y+8, r27	; 0x08
          byte txt4000[4] = {0b01100110, 0, 0b00111110, 0b00101101};
     f34:	8b a1       	ldd	r24, Y+35	; 0x23
     f36:	9c a1       	ldd	r25, Y+36	; 0x24
     f38:	ad a1       	ldd	r26, Y+37	; 0x25
     f3a:	be a1       	ldd	r27, Y+38	; 0x26
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	ab 83       	std	Y+3, r26	; 0x03
     f42:	bc 83       	std	Y+4, r27	; 0x04

  if (_menuPosition != menuPosition) {
     f44:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <menuPosition>
     f48:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_ZZ10runDisplayvE13_menuPosition>
     f4c:	81 17       	cp	r24, r17
     f4e:	c9 f0       	breq	.+50     	; 0xf82 <main+0x2ea>
      display.clearLineState();
     f50:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN6tm163714clearLineStateEv.constprop.21>
    _switch = 3;
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <_ZZ10runDisplayvE7_switch>
    _timer = millis() - 1;
     f5a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	a1 09       	sbc	r26, r1
     f66:	b1 09       	sbc	r27, r1
     f68:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <_ZZ10runDisplayvE6_timer>
     f6c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <_ZZ10runDisplayvE6_timer+0x1>
     f70:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <_ZZ10runDisplayvE6_timer+0x2>
     f74:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <_ZZ10runDisplayvE6_timer+0x3>
    menuPosition &= 0b01111111;
     f78:	1f 77       	andi	r17, 0x7F	; 127
     f7a:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <menuPosition>
   _menuPosition = menuPosition;
     f7e:	10 93 8f 01 	sts	0x018F, r17	; 0x80018f <_ZZ10runDisplayvE13_menuPosition>
  }
  
  if (millis() > _timer){
     f82:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
     f86:	00 91 8a 01 	lds	r16, 0x018A	; 0x80018a <_ZZ10runDisplayvE6_timer>
     f8a:	10 91 8b 01 	lds	r17, 0x018B	; 0x80018b <_ZZ10runDisplayvE6_timer+0x1>
     f8e:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <_ZZ10runDisplayvE6_timer+0x2>
     f92:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <_ZZ10runDisplayvE6_timer+0x3>
     f96:	06 17       	cp	r16, r22
     f98:	17 07       	cpc	r17, r23
     f9a:	28 07       	cpc	r18, r24
     f9c:	39 07       	cpc	r19, r25
     f9e:	08 f0       	brcs	.+2      	; 0xfa2 <main+0x30a>
     fa0:	7f c0       	rjmp	.+254    	; 0x10a0 <main+0x408>
    _switch = (_switch + 1) % 4;
     fa2:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <_ZZ10runDisplayvE7_switch>
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	83 70       	andi	r24, 0x03	; 3
     fac:	99 27       	eor	r25, r25
     fae:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <_ZZ10runDisplayvE7_switch>
    if (!_switch){
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	59 f5       	brne	.+86     	; 0x100c <main+0x374>
    _timer = millis() + 3000;
     fb6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	88 54       	subi	r24, 0x48	; 72
     fc0:	94 4f       	sbci	r25, 0xF4	; 244
     fc2:	af 4f       	sbci	r26, 0xFF	; 255
     fc4:	bf 4f       	sbci	r27, 0xFF	; 255
     fc6:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <_ZZ10runDisplayvE6_timer>
     fca:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <_ZZ10runDisplayvE6_timer+0x1>
     fce:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <_ZZ10runDisplayvE6_timer+0x2>
     fd2:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <_ZZ10runDisplayvE6_timer+0x3>
}

void tm1637::forceLineState(uint8_t _digit, uint8_t _high, uint8_t _low){
  if (_high != 255) linesForcedHigh[_digit] = _high;
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
  refresh(_digit);
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
      display.forceLineState(3, 255, 255);
      switch (menuPosition){
     fdc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menuPosition>
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	61 f0       	breq	.+24     	; 0xffc <main+0x364>
     fe4:	40 f0       	brcs	.+16     	; 0xff6 <main+0x35e>
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	71 f0       	breq	.+28     	; 0x1006 <main+0x36e>
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	09 f0       	breq	.+2      	; 0xff0 <main+0x358>
     fee:	58 c0       	rjmp	.+176    	; 0x10a0 <main+0x408>
        break;
        case 2:
          display.setSegments(txt2000);
        break;
        case 3:
          display.setSegments(txt4000);
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <main+0x368>
    if (!_switch){
    _timer = millis() + 3000;
      display.forceLineState(3, 255, 255);
      switch (menuPosition){
        case 0:
          display.setSegments(txt500);
     ff6:	ce 01       	movw	r24, r28
     ff8:	0d 96       	adiw	r24, 0x0d	; 13
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <main+0x368>
        break;
        case 1:
          display.setSegments(txt1000);
     ffc:	ce 01       	movw	r24, r28
     ffe:	09 96       	adiw	r24, 0x09	; 9
    1000:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>
    1004:	4d c0       	rjmp	.+154    	; 0x10a0 <main+0x408>
        break;
        case 2:
          display.setSegments(txt2000);
    1006:	ce 01       	movw	r24, r28
    1008:	05 96       	adiw	r24, 0x05	; 5
    100a:	fa cf       	rjmp	.-12     	; 0x1000 <main+0x368>
        case 3:
          display.setSegments(txt4000);
        break;
      }
    }
    else if (_switch & 1){
    100c:	80 ff       	sbrs	r24, 0
    100e:	17 c0       	rjmp	.+46     	; 0x103e <main+0x3a6>
      display.setSegments(nothing);
    1010:	81 e9       	ldi	r24, 0x91	; 145
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>
      display.clearLineState();
    1018:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN6tm163714clearLineStateEv.constprop.21>
      _timer = millis() + 250;
    101c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	86 50       	subi	r24, 0x06	; 6
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	af 4f       	sbci	r26, 0xFF	; 255
    102a:	bf 4f       	sbci	r27, 0xFF	; 255
    102c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <_ZZ10runDisplayvE6_timer>
    1030:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <_ZZ10runDisplayvE6_timer+0x1>
    1034:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <_ZZ10runDisplayvE6_timer+0x2>
    1038:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <_ZZ10runDisplayvE6_timer+0x3>
    103c:	31 c0       	rjmp	.+98     	; 0x10a0 <main+0x408>
	clkPin = _clkPin;
	dioPin = _dioPin;
}

void tm1637::forceLineState(uint8_t _digit, uint8_t _high, uint8_t _low){
  if (_high != 255) linesForcedHigh[_digit] = _high;
    103e:	8c e1       	ldi	r24, 0x1C	; 28
    1040:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <display+0xc>
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
    1044:	8c e9       	ldi	r24, 0x9C	; 156
    1046:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <display+0x10>
  refresh(_digit);
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
    }
    else {
      display.forceLineState(3, 0b00011100, 0b11100011);
    _timer = millis() + 1000;
    1050:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	88 51       	subi	r24, 0x18	; 24
    105a:	9c 4f       	sbci	r25, 0xFC	; 252
    105c:	af 4f       	sbci	r26, 0xFF	; 255
    105e:	bf 4f       	sbci	r27, 0xFF	; 255
    1060:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <_ZZ10runDisplayvE6_timer>
    1064:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <_ZZ10runDisplayvE6_timer+0x1>
    1068:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <_ZZ10runDisplayvE6_timer+0x2>
    106c:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <_ZZ10runDisplayvE6_timer+0x3>
      lowVolt += analogRead(INPUT_VOLT_ANALOG) * 20;
    1070:	80 e1       	ldi	r24, 0x10	; 16
    1072:	0e 94 a3 03 	call	0x746	; 0x746 <analogRead>
      lowVolt = lowVolt >> 1;
    1076:	24 e1       	ldi	r18, 0x14	; 20
    1078:	dc 01       	movw	r26, r24
    107a:	2a 9f       	mul	r18, r26
    107c:	c0 01       	movw	r24, r0
    107e:	2b 9f       	mul	r18, r27
    1080:	90 0d       	add	r25, r0
    1082:	11 24       	eor	r1, r1
    1084:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <lowVolt>
    1088:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <lowVolt+0x1>
    108c:	82 0f       	add	r24, r18
    108e:	93 1f       	adc	r25, r19
    1090:	96 95       	lsr	r25
    1092:	87 95       	ror	r24
    1094:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <lowVolt+0x1>
    1098:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <lowVolt>
      display.showNumberDec(lowVolt);
    109c:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6tm163713showNumberDecEibhh.constprop.23>

int8_t readEncoder(){
  static const byte _p [4] = {2, 3, 1, 0};
  static byte _inLast;
  byte _in = _p[ENCODER_STATE];
    10a0:	86 b1       	in	r24, 0x06	; 6
    10a2:	e9 b1       	in	r30, 0x09	; 9
    10a4:	85 fb       	bst	r24, 5
    10a6:	88 27       	eor	r24, r24
    10a8:	80 f9       	bld	r24, 0
    10aa:	8d 8b       	std	Y+21, r24	; 0x15
    10ac:	1e 8a       	std	Y+22, r1	; 0x16
    10ae:	e4 70       	andi	r30, 0x04	; 4
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	f5 95       	asr	r31
    10b4:	e7 95       	ror	r30
    10b6:	4d 89       	ldd	r20, Y+21	; 0x15
    10b8:	5e 89       	ldd	r21, Y+22	; 0x16
    10ba:	e4 2b       	or	r30, r20
    10bc:	f5 2b       	or	r31, r21
    10be:	e6 5e       	subi	r30, 0xE6	; 230
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
    10c2:	20 81       	ld	r18, Z
  if (_inLast == (_in + 1) % 4){
    10c4:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZZ11readEncodervE7_inLast>
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	e2 2f       	mov	r30, r18
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	af 01       	movw	r20, r30
    10d0:	4f 5f       	subi	r20, 0xFF	; 255
    10d2:	5f 4f       	sbci	r21, 0xFF	; 255
    10d4:	43 70       	andi	r20, 0x03	; 3
    10d6:	55 27       	eor	r21, r21
    10d8:	84 17       	cp	r24, r20
    10da:	95 07       	cpc	r25, r21
    10dc:	41 f4       	brne	.+16     	; 0x10ee <main+0x456>
    _inLast = _in;
    10de:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <_ZZ11readEncodervE7_inLast>
    if (_in == 1) {
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	21 30       	cpi	r18, 0x01	; 1
    10e6:	09 f0       	breq	.+2      	; 0x10ea <main+0x452>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	81 95       	neg	r24
    10ec:	0e c0       	rjmp	.+28     	; 0x110a <main+0x472>
      return -1;
    }
  }
  else if ((_inLast + 1) % 4 == _in) {
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	64 e0       	ldi	r22, 0x04	; 4
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	0e 94 2e 10 	call	0x205c	; 0x205c <__divmodhi4>
    _inLast = _in;
    10f8:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <_ZZ11readEncodervE7_inLast>
    _inLast = _in;
    if (_in == 1) {
      return -1;
    }
  }
  else if ((_inLast + 1) % 4 == _in) {
    10fc:	e8 17       	cp	r30, r24
    10fe:	f9 07       	cpc	r31, r25
    1100:	19 f4       	brne	.+6      	; 0x1108 <main+0x470>
  static byte _inLast;
  byte _in = _p[ENCODER_STATE];
  if (_inLast == (_in + 1) % 4){
    _inLast = _in;
    if (_in == 1) {
      return -1;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	22 30       	cpi	r18, 0x02	; 2
    1106:	09 f0       	breq	.+2      	; 0x110a <main+0x472>
    if (_in == 2){
      return 1;
    }
  }
  else _inLast = _in;
  return 0;
    1108:	80 e0       	ldi	r24, 0x00	; 0
void runUI(){
  static unsigned long _t;
  
  menuPosition += readEncoder();
    110a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <menuPosition>
    110e:	89 0f       	add	r24, r25
  if (menuPosition == 255) menuPosition = 0;
    1110:	8f 3f       	cpi	r24, 0xFF	; 255
    1112:	19 f4       	brne	.+6      	; 0x111a <main+0x482>
    1114:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <menuPosition>
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <main+0x48c>
  else if (menuPosition == 4) menuPosition = 3;
    111a:	84 30       	cpi	r24, 0x04	; 4
    111c:	09 f4       	brne	.+2      	; 0x1120 <main+0x488>
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <menuPosition>

  byte _b = readBtn();
    1124:	0e 94 ab 05 	call	0xb56	; 0xb56 <_Z7readBtnv>
    1128:	08 2f       	mov	r16, r24
  if (menuPosition < 5){
    112a:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <menuPosition>
    112e:	15 30       	cpi	r17, 0x05	; 5
    1130:	08 f0       	brcs	.+2      	; 0x1134 <main+0x49c>
    1132:	53 c0       	rjmp	.+166    	; 0x11da <main+0x542>
    if (_b){
    1134:	88 23       	and	r24, r24
    1136:	09 f4       	brne	.+2      	; 0x113a <main+0x4a2>
    1138:	65 c0       	rjmp	.+202    	; 0x1204 <main+0x56c>
      byte nothing[4] = {0, 0, 0, 0};
    113a:	1d 82       	std	Y+5, r1	; 0x05
    113c:	1e 82       	std	Y+6, r1	; 0x06
    113e:	1f 82       	std	Y+7, r1	; 0x07
    1140:	18 86       	std	Y+8, r1	; 0x08


void chargeFlash(){
  byte i = 10;
  unsigned long _t;
  display.clearLineState();
    1142:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN6tm163714clearLineStateEv.constprop.21>
  display.showNumberDec(analogRead(HIGH_VOLT_OUT_ANALOG) * 4 / 9);
    1146:	8e e0       	ldi	r24, 0x0E	; 14
    1148:	0e 94 a3 03 	call	0x746	; 0x746 <analogRead>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	69 e0       	ldi	r22, 0x09	; 9
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	0e 94 2e 10 	call	0x205c	; 0x205c <__divmodhi4>
    115c:	cb 01       	movw	r24, r22
    115e:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6tm163713showNumberDecEibhh.constprop.23>
  delay(250);
    1162:	6a ef       	ldi	r22, 0xFA	; 250
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 ba 03 	call	0x774	; 0x774 <delay>
  highVolt = 0;
    116e:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <__data_end+0x1>
    1172:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <__data_end>
  HIGH_VOLT_ON;
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	85 e0       	ldi	r24, 0x05	; 5
    117a:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
  _t = millis() + 500;
    117e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1182:	6b 01       	movw	r12, r22
    1184:	7c 01       	movw	r14, r24
    1186:	54 ef       	ldi	r21, 0xF4	; 244
    1188:	c5 0e       	add	r12, r21
    118a:	51 e0       	ldi	r21, 0x01	; 1
    118c:	d5 1e       	adc	r13, r21
    118e:	e1 1c       	adc	r14, r1
    1190:	f1 1c       	adc	r15, r1
  while (millis() < _t) display.showNumberDec(analogRead(HIGH_VOLT_OUT_ANALOG)/ 8);
    1192:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1196:	6c 15       	cp	r22, r12
    1198:	7d 05       	cpc	r23, r13
    119a:	8e 05       	cpc	r24, r14
    119c:	9f 05       	cpc	r25, r15
    119e:	68 f4       	brcc	.+26     	; 0x11ba <main+0x522>
    11a0:	8e e0       	ldi	r24, 0x0E	; 14
    11a2:	0e 94 a3 03 	call	0x746	; 0x746 <analogRead>
    11a6:	97 fd       	sbrc	r25, 7
    11a8:	07 96       	adiw	r24, 0x07	; 7
    11aa:	23 e0       	ldi	r18, 0x03	; 3
    11ac:	95 95       	asr	r25
    11ae:	87 95       	ror	r24
    11b0:	2a 95       	dec	r18
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <main+0x514>
    11b4:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6tm163713showNumberDecEibhh.constprop.23>
    11b8:	ec cf       	rjmp	.-40     	; 0x1192 <main+0x4fa>
    11ba:	8a e0       	ldi	r24, 0x0A	; 10
    11bc:	78 2e       	mov	r7, r24
  while (i && analogRead(HIGH_VOLT_OUT_ANALOG) > highVolt + 1){
    11be:	8e e0       	ldi	r24, 0x0E	; 14
    11c0:	0e 94 a3 03 	call	0x746	; 0x746 <analogRead>
    11c4:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <__data_end>
    11c8:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <__data_end+0x1>
    11cc:	2f 5f       	subi	r18, 0xFF	; 255
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	28 17       	cp	r18, r24
    11d2:	39 07       	cpc	r19, r25
    11d4:	0c f4       	brge	.+2      	; 0x11d8 <main+0x540>
    11d6:	f8 c1       	rjmp	.+1008   	; 0x15c8 <main+0x930>
    11d8:	69 c0       	rjmp	.+210    	; 0x12ac <main+0x614>
      }
     
    }
  }
  else {
    flashState = 255;
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    if (readBtn()) initializeFlash();
    11e0:	0e 94 ab 05 	call	0xb56	; 0xb56 <_Z7readBtnv>
    11e4:	88 23       	and	r24, r24
    11e6:	21 f0       	breq	.+8      	; 0x11f0 <main+0x558>
         }
        }
      }
    }
  }
  HIGH_VOLT_OFF;
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	85 e0       	ldi	r24, 0x05	; 5
    11ec:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
    _t = millis();
    11f0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    11f4:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <_ZZ5runUIvE2_t>
    11f8:	70 93 96 01 	sts	0x0196, r23	; 0x800196 <_ZZ5runUIvE2_t+0x1>
    11fc:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <_ZZ5runUIvE2_t+0x2>
    1200:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <_ZZ5runUIvE2_t+0x3>
    EEPROM.update(i, 0);
  }
}

void runSerial(){
  if (Serial.available()){
    1204:	81 ea       	ldi	r24, 0xA1	; 161
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN14HardwareSerial9availableEv>
    120c:	89 2b       	or	r24, r25
    120e:	99 f1       	breq	.+102    	; 0x1276 <main+0x5de>
    char _c;
    _c = Serial.read();
    1210:	81 ea       	ldi	r24, 0xA1	; 161
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN14HardwareSerial4readEv>
    if (_c == 'p'){
    1218:	80 37       	cpi	r24, 0x70	; 112
    121a:	59 f4       	brne	.+22     	; 0x1232 <main+0x59a>
    121c:	00 e0       	ldi	r16, 0x00	; 0
    121e:	10 e0       	ldi	r17, 0x00	; 0
}

void printHistory(){
  int e;
  e = 0;
  while (EEPROM.read(e) && EEPROM.read(e) != 255){
    1220:	c8 01       	movw	r24, r16
    1222:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN11EEPROMClass4readEi.isra.0.lto_priv.47>
    1226:	9f ef       	ldi	r25, 0xFF	; 255
    1228:	98 0f       	add	r25, r24
    122a:	9e 3f       	cpi	r25, 0xFE	; 254
    122c:	08 f4       	brcc	.+2      	; 0x1230 <main+0x598>
    122e:	32 c3       	rjmp	.+1636   	; 0x1894 <main+0xbfc>
    1230:	1e c0       	rjmp	.+60     	; 0x126e <main+0x5d6>
    char _c;
    _c = Serial.read();
    if (_c == 'p'){
      printHistory();
    }
    else if (_c == 'e') {
    1232:	85 36       	cpi	r24, 0x65	; 101
    1234:	a1 f4       	brne	.+40     	; 0x125e <main+0x5c6>
    1236:	00 e0       	ldi	r16, 0x00	; 0
    1238:	10 e0       	ldi	r17, 0x00	; 0
    123a:	c8 01       	movw	r24, r16
    123c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    1240:	88 23       	and	r24, r24
    1242:	21 f0       	breq	.+8      	; 0x124c <main+0x5b4>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	c8 01       	movw	r24, r16
    1248:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <eeprom_write_byte>
    e += 5;
  }
}

void clearHistory(){
  for (int i = 0; i < EEPROM.length(); i++){
    124c:	0f 5f       	subi	r16, 0xFF	; 255
    124e:	1f 4f       	sbci	r17, 0xFF	; 255
    1250:	01 15       	cp	r16, r1
    1252:	94 e0       	ldi	r25, 0x04	; 4
    1254:	19 07       	cpc	r17, r25
    1256:	89 f7       	brne	.-30     	; 0x123a <main+0x5a2>
    if (_c == 'p'){
      printHistory();
    }
    else if (_c == 'e') {
      clearHistory();
      Serial.println(F("History Cleared"));
    1258:	87 eb       	ldi	r24, 0xB7	; 183
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	06 c0       	rjmp	.+12     	; 0x126a <main+0x5d2>
    }
    else {
      Serial.println(F("Type p to print history"));
    125e:	8f e9       	ldi	r24, 0x9F	; 159
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 81 01 	call	0x302	; 0x302 <_ZN5Print7printlnEPK19__FlashStringHelper.constprop.6>
      Serial.println(F("Type e to erase history"));
    1266:	87 e8       	ldi	r24, 0x87	; 135
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 81 01 	call	0x302	; 0x302 <_ZN5Print7printlnEPK19__FlashStringHelper.constprop.6>
    126e:	80 e5       	ldi	r24, 0x50	; 80
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1276:	0e 94 06 05 	call	0xa0c	; 0xa0c <_Z14serialEventRunv>
    127a:	44 ce       	rjmp	.-888    	; 0xf04 <main+0x26c>
  while (i && analogRead(HIGH_VOLT_OUT_ANALOG) > highVolt + 1){
    readBtn();
    i--;
    highVolt = analogRead(HIGH_VOLT_OUT_ANALOG);
    _t = millis() + 500;
    while (millis() < _t || BUTTON_PRESSED) display.showNumberDec(analogRead(HIGH_VOLT_OUT_ANALOG) / 8);
    127c:	8e e0       	ldi	r24, 0x0E	; 14
    127e:	0e 94 a3 03 	call	0x746	; 0x746 <analogRead>
    1282:	97 fd       	sbrc	r25, 7
    1284:	07 96       	adiw	r24, 0x07	; 7
    1286:	b3 e0       	ldi	r27, 0x03	; 3
    1288:	95 95       	asr	r25
    128a:	87 95       	ror	r24
    128c:	ba 95       	dec	r27
    128e:	e1 f7       	brne	.-8      	; 0x1288 <main+0x5f0>
    1290:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6tm163713showNumberDecEibhh.constprop.23>
    1294:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1298:	6c 15       	cp	r22, r12
    129a:	7d 05       	cpc	r23, r13
    129c:	8e 05       	cpc	r24, r14
    129e:	9f 05       	cpc	r25, r15
    12a0:	68 f3       	brcs	.-38     	; 0x127c <main+0x5e4>
    12a2:	34 9b       	sbis	0x06, 4	; 6
    12a4:	eb cf       	rjmp	.-42     	; 0x127c <main+0x5e4>
    12a6:	7a 94       	dec	r7
  delay(250);
  highVolt = 0;
  HIGH_VOLT_ON;
  _t = millis() + 500;
  while (millis() < _t) display.showNumberDec(analogRead(HIGH_VOLT_OUT_ANALOG)/ 8);
  while (i && analogRead(HIGH_VOLT_OUT_ANALOG) > highVolt + 1){
    12a8:	71 10       	cpse	r7, r1
    12aa:	89 cf       	rjmp	.-238    	; 0x11be <main+0x526>
  byte _b = readBtn();
  if (menuPosition < 5){
    if (_b){
      byte nothing[4] = {0, 0, 0, 0};
      chargeFlash();
      if (_b == 2){
    12ac:	02 30       	cpi	r16, 0x02	; 2
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <main+0x61a>
    12b0:	f7 c0       	rjmp	.+494    	; 0x14a0 <main+0x808>
        display.setSegments(nothing);
    12b2:	ce 01       	movw	r24, r28
    12b4:	05 96       	adiw	r24, 0x05	; 5
    12b6:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>
void forceFlash(){
  switch (menuPosition){
    12ba:	11 30       	cpi	r17, 0x01	; 1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <main+0x628>
    12be:	25 c0       	rjmp	.+74     	; 0x130a <main+0x672>
    12c0:	08 f4       	brcc	.+2      	; 0x12c4 <main+0x62c>
    12c2:	20 c0       	rjmp	.+64     	; 0x1304 <main+0x66c>
    12c4:	12 30       	cpi	r17, 0x02	; 2
    12c6:	09 f4       	brne	.+2      	; 0x12ca <main+0x632>
    12c8:	23 c0       	rjmp	.+70     	; 0x1310 <main+0x678>
    12ca:	13 30       	cpi	r17, 0x03	; 3
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <main+0x638>
    12ce:	39 c0       	rjmp	.+114    	; 0x1342 <main+0x6aa>
      DELAY_500_NS;
      NOP; NOP; NOP;
      FLASH_OFF;
  break;
  case 3:
      FLASH_ON;
    12d0:	15 b9       	out	0x05, r17	; 5
	...
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
    1302:	19 c0       	rjmp	.+50     	; 0x1336 <main+0x69e>
void forceFlash(){
  switch (menuPosition){
  case 0:
      FLASH_ON;
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	85 b9       	out	0x05, r24	; 5
    1308:	1a c0       	rjmp	.+52     	; 0x133e <main+0x6a6>
      NOP;
      FLASH_OFF;
  break;
  case 1:
      FLASH_ON;
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	85 b9       	out	0x05, r24	; 5
    130e:	13 c0       	rjmp	.+38     	; 0x1336 <main+0x69e>
      NOP; NOP; NOP; NOP; NOP; 
      FLASH_OFF;
  break;
  case 2:
      FLASH_ON;
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	85 b9       	out	0x05, r24	; 5
	...
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
      NOP; NOP; NOP;
    1330:	00 00       	nop
      FLASH_OFF;
    1332:	15 b9       	out	0x05, r17	; 5
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <main+0x6aa>
	...
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
      NOP;
    133e:	00 00       	nop
      FLASH_OFF;
    1340:	05 b9       	out	0x05, r16	; 5
  break;
    default:
    break;
  }
  FLASH_OFF;
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	85 b9       	out	0x05, r24	; 5
  delay(50);
    1346:	62 e3       	ldi	r22, 0x32	; 50
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 ba 03 	call	0x774	; 0x774 <delay>
  nextVolt = analogRead(HIGH_VOLT_OUT_ANALOG);
    1352:	8e e0       	ldi	r24, 0x0E	; 14
    1354:	0e 94 a3 03 	call	0x746	; 0x746 <analogRead>
    1358:	09 2e       	mov	r0, r25
    135a:	00 0c       	add	r0, r0
    135c:	aa 0b       	sbc	r26, r26
    135e:	bb 0b       	sbc	r27, r27
    1360:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <nextVolt>
    1364:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <nextVolt+0x1>
    1368:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <nextVolt+0x2>
    136c:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <nextVolt+0x3>
        forceFlash();
        HIGH_VOLT_OFF;     
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	85 e0       	ldi	r24, 0x05	; 5
    1374:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
        recordPerformance();
    1378:	0e 94 6e 05 	call	0xadc	; 0xadc <_Z17recordPerformancev>
          float _c;
          _c = (nextVolt - highVolt) / 8;
    137c:	40 90 84 01 	lds	r4, 0x0184	; 0x800184 <nextVolt>
    1380:	50 90 85 01 	lds	r5, 0x0185	; 0x800185 <nextVolt+0x1>
    1384:	60 90 86 01 	lds	r6, 0x0186	; 0x800186 <nextVolt+0x2>
    1388:	70 90 87 01 	lds	r7, 0x0187	; 0x800187 <nextVolt+0x3>
    138c:	c0 90 82 01 	lds	r12, 0x0182	; 0x800182 <__data_end>
    1390:	d0 90 83 01 	lds	r13, 0x0183	; 0x800183 <__data_end+0x1>
    1394:	0d 2c       	mov	r0, r13
    1396:	00 0c       	add	r0, r0
    1398:	ee 08       	sbc	r14, r14
    139a:	ff 08       	sbc	r15, r15
    139c:	d3 01       	movw	r26, r6
    139e:	c2 01       	movw	r24, r4
    13a0:	8c 19       	sub	r24, r12
    13a2:	9d 09       	sbc	r25, r13
    13a4:	ae 09       	sbc	r26, r14
    13a6:	bf 09       	sbc	r27, r15
    13a8:	bc 01       	movw	r22, r24
    13aa:	cd 01       	movw	r24, r26
    13ac:	a3 e0       	ldi	r26, 0x03	; 3
    13ae:	96 95       	lsr	r25
    13b0:	87 95       	ror	r24
    13b2:	77 95       	ror	r23
    13b4:	67 95       	ror	r22
    13b6:	aa 95       	dec	r26
    13b8:	d1 f7       	brne	.-12     	; 0x13ae <main+0x716>
    13ba:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__floatunsisf>
          _c *= CAPACITANCE_UF;
    13be:	23 e3       	ldi	r18, 0x33	; 51
    13c0:	33 e3       	ldi	r19, 0x33	; 51
    13c2:	43 e5       	ldi	r20, 0x53	; 83
    13c4:	50 e4       	ldi	r21, 0x40	; 64
    13c6:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__mulsf3>
          _c *= 2;
    13ca:	9b 01       	movw	r18, r22
    13cc:	ac 01       	movw	r20, r24
    13ce:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__addsf3>
    13d2:	69 8b       	std	Y+17, r22	; 0x11
    13d4:	7a 8b       	std	Y+18, r23	; 0x12
    13d6:	8b 8b       	std	Y+19, r24	; 0x13
    13d8:	9c 8b       	std	Y+20, r25	; 0x14
          byte x[4] = {1, 2, 4, 8};
    13da:	8f a1       	ldd	r24, Y+39	; 0x27
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	98 a5       	ldd	r25, Y+40	; 0x28
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	a9 a5       	ldd	r26, Y+41	; 0x29
    13e4:	ab 83       	std	Y+3, r26	; 0x03
    13e6:	ba a5       	ldd	r27, Y+42	; 0x2a
    13e8:	bc 83       	std	Y+4, r27	; 0x04
          _c /= x[menuPosition];
    13ea:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <menuPosition>
    13ee:	e1 e0       	ldi	r30, 0x01	; 1
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	ec 0f       	add	r30, r28
    13f4:	fd 1f       	adc	r31, r29
    13f6:	e1 0f       	add	r30, r17
    13f8:	f1 1d       	adc	r31, r1
    13fa:	60 81       	ld	r22, Z
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__floatsisf>
    1406:	9b 01       	movw	r18, r22
    1408:	ac 01       	movw	r20, r24
    140a:	69 89       	ldd	r22, Y+17	; 0x11
    140c:	7a 89       	ldd	r23, Y+18	; 0x12
    140e:	8b 89       	ldd	r24, Y+19	; 0x13
    1410:	9c 89       	ldd	r25, Y+20	; 0x14
    1412:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divsf3>
          _c *= 100;
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	48 ec       	ldi	r20, 0xC8	; 200
    141c:	52 e4       	ldi	r21, 0x42	; 66
    141e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__mulsf3>
    1422:	69 8b       	std	Y+17, r22	; 0x11
    1424:	7a 8b       	std	Y+18, r23	; 0x12
    1426:	8b 8b       	std	Y+19, r24	; 0x13
    1428:	9c 8b       	std	Y+20, r25	; 0x14
      
          nextVolt *= 10000;
          nextVolt /= highVolt;
    142a:	a0 e1       	ldi	r26, 0x10	; 16
    142c:	b7 e2       	ldi	r27, 0x27	; 39
    142e:	a3 01       	movw	r20, r6
    1430:	92 01       	movw	r18, r4
    1432:	0e 94 64 10 	call	0x20c8	; 0x20c8 <__muluhisi3>
    1436:	a7 01       	movw	r20, r14
    1438:	96 01       	movw	r18, r12
    143a:	0e 94 42 10 	call	0x2084	; 0x2084 <__udivmodsi4>
    143e:	69 01       	movw	r12, r18
    1440:	7a 01       	movw	r14, r20
    1442:	20 93 84 01 	sts	0x0184, r18	; 0x800184 <nextVolt>
    1446:	30 93 85 01 	sts	0x0185, r19	; 0x800185 <nextVolt+0x1>
    144a:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <nextVolt+0x2>
    144e:	50 93 87 01 	sts	0x0187, r21	; 0x800187 <nextVolt+0x3>
	clkPin = _clkPin;
	dioPin = _dioPin;
}

void tm1637::forceLineState(uint8_t _digit, uint8_t _high, uint8_t _low){
  if (_high != 255) linesForcedHigh[_digit] = _high;
    1452:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <display+0xb>
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
    1456:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <display+0xf>
  refresh(_digit);
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
	clkPin = _clkPin;
	dioPin = _dioPin;
}

void tm1637::forceLineState(uint8_t _digit, uint8_t _high, uint8_t _low){
  if (_high != 255) linesForcedHigh[_digit] = _high;
    1460:	83 e7       	ldi	r24, 0x73	; 115
    1462:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <display+0xc>
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
    1466:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <display+0x10>
  refresh(_digit);
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
        
        display.forceLineState(2, 0, 0b01111111);
        display.forceLineState(3, 0b01110011, 0b00001100);
        display.showNumberDec(nextVolt);
    1470:	c6 01       	movw	r24, r12
    1472:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6tm163713showNumberDecEibhh.constprop.23>
          unsigned long _t;
          _t = millis() + 1000;
    1476:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    147a:	6b 01       	movw	r12, r22
    147c:	7c 01       	movw	r14, r24
    147e:	28 ee       	ldi	r18, 0xE8	; 232
    1480:	c2 0e       	add	r12, r18
    1482:	23 e0       	ldi	r18, 0x03	; 3
    1484:	d2 1e       	adc	r13, r18
    1486:	e1 1c       	adc	r14, r1
    1488:	f1 1c       	adc	r15, r1
          while (millis() < _t && BUTTON_NOT_PRESSED){};
    148a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    148e:	6c 15       	cp	r22, r12
    1490:	7d 05       	cpc	r23, r13
    1492:	8e 05       	cpc	r24, r14
    1494:	9f 05       	cpc	r25, r15
    1496:	08 f0       	brcs	.+2      	; 0x149a <main+0x802>
    1498:	ab c0       	rjmp	.+342    	; 0x15f0 <main+0x958>
    149a:	34 99       	sbic	0x06, 4	; 6
    149c:	f6 cf       	rjmp	.-20     	; 0x148a <main+0x7f2>
    149e:	a8 c0       	rjmp	.+336    	; 0x15f0 <main+0x958>
        display.clearLineState();
          _t = millis() + 250;
          while (millis() < _t && BUTTON_NOT_PRESSED){};
        REFRESH_DISPLAY;
      }
      else if (_b == 1){
    14a0:	01 30       	cpi	r16, 0x01	; 1
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <main+0x80e>
    14a4:	af ce       	rjmp	.-674    	; 0x1204 <main+0x56c>
}


void runFlash(){
  display.setSegments(nothing);
    14a6:	81 e9       	ldi	r24, 0x91	; 145
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>
  switch (menuPosition){
    14ae:	11 30       	cpi	r17, 0x01	; 1
    14b0:	71 f0       	breq	.+28     	; 0x14ce <main+0x836>
    14b2:	28 f0       	brcs	.+10     	; 0x14be <main+0x826>
    14b4:	12 30       	cpi	r17, 0x02	; 2
    14b6:	99 f0       	breq	.+38     	; 0x14de <main+0x846>
    14b8:	13 30       	cpi	r17, 0x03	; 3
    14ba:	c9 f0       	breq	.+50     	; 0x14ee <main+0x856>
    14bc:	3e c0       	rjmp	.+124    	; 0x153a <main+0x8a2>
  case 0:
    while (TRIGGER_HIGH_BUTTON_NOT_PRESSED){};
    14be:	86 b1       	in	r24, 0x06	; 6
    14c0:	88 71       	andi	r24, 0x18	; 24
    14c2:	e9 f7       	brne	.-6      	; 0x14be <main+0x826>
      if (BUTTON_NOT_PRESSED) FLASH_ON;
    14c4:	34 9b       	sbis	0x06, 4	; 6
    14c6:	36 c0       	rjmp	.+108    	; 0x1534 <main+0x89c>
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	85 b9       	out	0x05, r24	; 5
    14cc:	33 c0       	rjmp	.+102    	; 0x1534 <main+0x89c>
      NOP;
      FLASH_OFF;
  break;
  case 1:
    while (TRIGGER_HIGH_BUTTON_NOT_PRESSED){};
    14ce:	86 b1       	in	r24, 0x06	; 6
    14d0:	88 71       	andi	r24, 0x18	; 24
    14d2:	e9 f7       	brne	.-6      	; 0x14ce <main+0x836>
      if (BUTTON_NOT_PRESSED) FLASH_ON;
    14d4:	34 9b       	sbis	0x06, 4	; 6
    14d6:	2a c0       	rjmp	.+84     	; 0x152c <main+0x894>
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	85 b9       	out	0x05, r24	; 5
    14dc:	27 c0       	rjmp	.+78     	; 0x152c <main+0x894>
      NOP; NOP; NOP; NOP; NOP; 
      FLASH_OFF;
  break;
  case 2:
    while (TRIGGER_HIGH_BUTTON_NOT_PRESSED){};
    14de:	86 b1       	in	r24, 0x06	; 6
    14e0:	88 71       	andi	r24, 0x18	; 24
    14e2:	e9 f7       	brne	.-6      	; 0x14de <main+0x846>
      if (BUTTON_NOT_PRESSED) FLASH_ON;
    14e4:	34 9b       	sbis	0x06, 4	; 6
    14e6:	18 c0       	rjmp	.+48     	; 0x1518 <main+0x880>
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	85 b9       	out	0x05, r24	; 5
    14ec:	15 c0       	rjmp	.+42     	; 0x1518 <main+0x880>
      DELAY_500_NS;
      NOP; NOP; NOP;
      FLASH_OFF;
  break;
  case 3:
    while (TRIGGER_HIGH_BUTTON_NOT_PRESSED){};
    14ee:	86 b1       	in	r24, 0x06	; 6
    14f0:	88 71       	andi	r24, 0x18	; 24
    14f2:	e9 f7       	brne	.-6      	; 0x14ee <main+0x856>
      if (BUTTON_NOT_PRESSED) FLASH_ON;
    14f4:	34 9b       	sbis	0x06, 4	; 6
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <main+0x864>
    14f8:	83 e0       	ldi	r24, 0x03	; 3
    14fa:	85 b9       	out	0x05, r24	; 5
	...
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
      DELAY_500_NS;
      NOP;
    1534:	00 00       	nop
      FLASH_OFF;
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	85 b9       	out	0x05, r24	; 5
  break;
  default:
     break;
  }
  FLASH_OFF;
    153a:	82 e0       	ldi	r24, 0x02	; 2
    153c:	85 b9       	out	0x05, r24	; 5
  delay(50);
    153e:	62 e3       	ldi	r22, 0x32	; 50
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 ba 03 	call	0x774	; 0x774 <delay>
  nextVolt = analogRead(HIGH_VOLT_OUT_ANALOG);
    154a:	8e e0       	ldi	r24, 0x0E	; 14
    154c:	0e 94 a3 03 	call	0x746	; 0x746 <analogRead>
    1550:	09 2e       	mov	r0, r25
    1552:	00 0c       	add	r0, r0
    1554:	aa 0b       	sbc	r26, r26
    1556:	bb 0b       	sbc	r27, r27
    1558:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <nextVolt>
    155c:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <nextVolt+0x1>
    1560:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <nextVolt+0x2>
    1564:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <nextVolt+0x3>
        runFlash();
        HIGH_VOLT_OFF;
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	85 e0       	ldi	r24, 0x05	; 5
    156c:	0e 94 b8 01 	call	0x370	; 0x370 <pinMode>
        if (BUTTON_NOT_PRESSED) {
    1570:	34 9b       	sbis	0x06, 4	; 6
    1572:	20 c0       	rjmp	.+64     	; 0x15b4 <main+0x91c>
          recordPerformance();
    1574:	0e 94 6e 05 	call	0xadc	; 0xadc <_Z17recordPerformancev>
          unsigned long _t;
          _t = millis() + 3000;
    1578:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    157c:	6b 01       	movw	r12, r22
    157e:	7c 01       	movw	r14, r24
    1580:	48 eb       	ldi	r20, 0xB8	; 184
    1582:	c4 0e       	add	r12, r20
    1584:	4b e0       	ldi	r20, 0x0B	; 11
    1586:	d4 1e       	adc	r13, r20
    1588:	e1 1c       	adc	r14, r1
    158a:	f1 1c       	adc	r15, r1
          while (millis() < _t && BUTTON_NOT_PRESSED){};
    158c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1590:	6c 15       	cp	r22, r12
    1592:	7d 05       	cpc	r23, r13
    1594:	8e 05       	cpc	r24, r14
    1596:	9f 05       	cpc	r25, r15
    1598:	08 f0       	brcs	.+2      	; 0x159c <main+0x904>
    159a:	93 c0       	rjmp	.+294    	; 0x16c2 <main+0xa2a>
    159c:	34 99       	sbic	0x06, 4	; 6
    159e:	f6 cf       	rjmp	.-20     	; 0x158c <main+0x8f4>
    15a0:	90 c0       	rjmp	.+288    	; 0x16c2 <main+0xa2a>
          _t = millis() + 1000;
          while (millis() < _t && BUTTON_NOT_PRESSED){};
          display.setSegments(nothing);
          display.clearLineState();
          _t = millis() + 250;
          while (millis() < _t && BUTTON_NOT_PRESSED){};
    15a2:	34 9b       	sbis	0x06, 4	; 6
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <main+0x91c>
    15a6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    15aa:	6c 15       	cp	r22, r12
    15ac:	7d 05       	cpc	r23, r13
    15ae:	8e 05       	cpc	r24, r14
    15b0:	9f 05       	cpc	r25, r15
    15b2:	b8 f3       	brcs	.-18     	; 0x15a2 <main+0x90a>
        }
        REFRESH_DISPLAY;
    15b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menuPosition>
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <menuPosition>
        while (!TRIGGER_HIGH || BUTTON_PRESSED){};
    15be:	33 9b       	sbis	0x06, 3	; 6
    15c0:	fe cf       	rjmp	.-4      	; 0x15be <main+0x926>
    15c2:	34 9b       	sbis	0x06, 4	; 6
    15c4:	fc cf       	rjmp	.-8      	; 0x15be <main+0x926>
    15c6:	1e ce       	rjmp	.-964    	; 0x1204 <main+0x56c>
  highVolt = 0;
  HIGH_VOLT_ON;
  _t = millis() + 500;
  while (millis() < _t) display.showNumberDec(analogRead(HIGH_VOLT_OUT_ANALOG)/ 8);
  while (i && analogRead(HIGH_VOLT_OUT_ANALOG) > highVolt + 1){
    readBtn();
    15c8:	0e 94 ab 05 	call	0xb56	; 0xb56 <_Z7readBtnv>
    i--;
    highVolt = analogRead(HIGH_VOLT_OUT_ANALOG);
    15cc:	8e e0       	ldi	r24, 0x0E	; 14
    15ce:	0e 94 a3 03 	call	0x746	; 0x746 <analogRead>
    15d2:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
    15d6:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
    _t = millis() + 500;
    15da:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    15de:	6b 01       	movw	r12, r22
    15e0:	7c 01       	movw	r14, r24
    15e2:	a4 ef       	ldi	r26, 0xF4	; 244
    15e4:	ca 0e       	add	r12, r26
    15e6:	a1 e0       	ldi	r26, 0x01	; 1
    15e8:	da 1e       	adc	r13, r26
    15ea:	e1 1c       	adc	r14, r1
    15ec:	f1 1c       	adc	r15, r1
    15ee:	52 ce       	rjmp	.-860    	; 0x1294 <main+0x5fc>
        display.forceLineState(3, 0b01110011, 0b00001100);
        display.showNumberDec(nextVolt);
          unsigned long _t;
          _t = millis() + 1000;
          while (millis() < _t && BUTTON_NOT_PRESSED){};
        display.setSegments(nothing);
    15f0:	ce 01       	movw	r24, r28
    15f2:	05 96       	adiw	r24, 0x05	; 5
    15f4:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>
        display.clearLineState();
    15f8:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN6tm163714clearLineStateEv.constprop.21>
          _t = millis() + 250;
    15fc:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1600:	6b 01       	movw	r12, r22
    1602:	7c 01       	movw	r14, r24
    1604:	ba ef       	ldi	r27, 0xFA	; 250
    1606:	cb 0e       	add	r12, r27
    1608:	d1 1c       	adc	r13, r1
    160a:	e1 1c       	adc	r14, r1
    160c:	f1 1c       	adc	r15, r1
          while (millis() < _t && BUTTON_NOT_PRESSED){};
    160e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1612:	6c 15       	cp	r22, r12
    1614:	7d 05       	cpc	r23, r13
    1616:	8e 05       	cpc	r24, r14
    1618:	9f 05       	cpc	r25, r15
    161a:	10 f4       	brcc	.+4      	; 0x1620 <main+0x988>
    161c:	34 99       	sbic	0x06, 4	; 6
    161e:	f7 cf       	rjmp	.-18     	; 0x160e <main+0x976>
        nextVolt = _c;
    1620:	69 89       	ldd	r22, Y+17	; 0x11
    1622:	7a 89       	ldd	r23, Y+18	; 0x12
    1624:	8b 89       	ldd	r24, Y+19	; 0x13
    1626:	9c 89       	ldd	r25, Y+20	; 0x14
    1628:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__fixunssfsi>
    162c:	6b 01       	movw	r12, r22
    162e:	7c 01       	movw	r14, r24
    1630:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <nextVolt>
    1634:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <nextVolt+0x1>
    1638:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <nextVolt+0x2>
    163c:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <nextVolt+0x3>
	clkPin = _clkPin;
	dioPin = _dioPin;
}

void tm1637::forceLineState(uint8_t _digit, uint8_t _high, uint8_t _low){
  if (_high != 255) linesForcedHigh[_digit] = _high;
    1640:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <display+0xb>
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
    1644:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <display+0xf>
  refresh(_digit);
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
	clkPin = _clkPin;
	dioPin = _dioPin;
}

void tm1637::forceLineState(uint8_t _digit, uint8_t _high, uint8_t _low){
  if (_high != 255) linesForcedHigh[_digit] = _high;
    164e:	87 e7       	ldi	r24, 0x77	; 119
    1650:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <display+0xc>
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
    1654:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <display+0x10>
  refresh(_digit);
    1658:	83 e0       	ldi	r24, 0x03	; 3
    165a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
        display.forceLineState(2, 0, 0b01111111);
        display.forceLineState(3, 0b01110111, 0b00001000);
        display.showNumberDec(nextVolt);
    165e:	c6 01       	movw	r24, r12
    1660:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6tm163713showNumberDecEibhh.constprop.23>
          _t = millis() + 1000;
    1664:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1668:	6b 01       	movw	r12, r22
    166a:	7c 01       	movw	r14, r24
    166c:	28 ee       	ldi	r18, 0xE8	; 232
    166e:	c2 0e       	add	r12, r18
    1670:	23 e0       	ldi	r18, 0x03	; 3
    1672:	d2 1e       	adc	r13, r18
    1674:	e1 1c       	adc	r14, r1
    1676:	f1 1c       	adc	r15, r1
          while (millis() < _t && BUTTON_NOT_PRESSED){};
    1678:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    167c:	6c 15       	cp	r22, r12
    167e:	7d 05       	cpc	r23, r13
    1680:	8e 05       	cpc	r24, r14
    1682:	9f 05       	cpc	r25, r15
    1684:	10 f4       	brcc	.+4      	; 0x168a <main+0x9f2>
    1686:	34 99       	sbic	0x06, 4	; 6
    1688:	f7 cf       	rjmp	.-18     	; 0x1678 <main+0x9e0>
        display.setSegments(nothing);
    168a:	ce 01       	movw	r24, r28
    168c:	05 96       	adiw	r24, 0x05	; 5
    168e:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>
        display.clearLineState();
    1692:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN6tm163714clearLineStateEv.constprop.21>
          _t = millis() + 250;
    1696:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    169a:	6b 01       	movw	r12, r22
    169c:	7c 01       	movw	r14, r24
    169e:	4a ef       	ldi	r20, 0xFA	; 250
    16a0:	c4 0e       	add	r12, r20
    16a2:	d1 1c       	adc	r13, r1
    16a4:	e1 1c       	adc	r14, r1
    16a6:	f1 1c       	adc	r15, r1
          while (millis() < _t && BUTTON_NOT_PRESSED){};
    16a8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    16ac:	6c 15       	cp	r22, r12
    16ae:	7d 05       	cpc	r23, r13
    16b0:	8e 05       	cpc	r24, r14
    16b2:	9f 05       	cpc	r25, r15
    16b4:	10 f4       	brcc	.+4      	; 0x16ba <main+0xa22>
    16b6:	34 99       	sbic	0x06, 4	; 6
    16b8:	f7 cf       	rjmp	.-18     	; 0x16a8 <main+0xa10>
        REFRESH_DISPLAY;
    16ba:	10 68       	ori	r17, 0x80	; 128
    16bc:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <menuPosition>
    16c0:	a1 cd       	rjmp	.-1214   	; 0x1204 <main+0x56c>
          recordPerformance();
          unsigned long _t;
          _t = millis() + 3000;
          while (millis() < _t && BUTTON_NOT_PRESSED){};
          float _c;
          _c = (nextVolt - highVolt) / 8;
    16c2:	40 90 84 01 	lds	r4, 0x0184	; 0x800184 <nextVolt>
    16c6:	50 90 85 01 	lds	r5, 0x0185	; 0x800185 <nextVolt+0x1>
    16ca:	60 90 86 01 	lds	r6, 0x0186	; 0x800186 <nextVolt+0x2>
    16ce:	70 90 87 01 	lds	r7, 0x0187	; 0x800187 <nextVolt+0x3>
    16d2:	c0 90 82 01 	lds	r12, 0x0182	; 0x800182 <__data_end>
    16d6:	d0 90 83 01 	lds	r13, 0x0183	; 0x800183 <__data_end+0x1>
    16da:	0d 2c       	mov	r0, r13
    16dc:	00 0c       	add	r0, r0
    16de:	ee 08       	sbc	r14, r14
    16e0:	ff 08       	sbc	r15, r15
    16e2:	d3 01       	movw	r26, r6
    16e4:	c2 01       	movw	r24, r4
    16e6:	8c 19       	sub	r24, r12
    16e8:	9d 09       	sbc	r25, r13
    16ea:	ae 09       	sbc	r26, r14
    16ec:	bf 09       	sbc	r27, r15
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	23 e0       	ldi	r18, 0x03	; 3
    16f4:	96 95       	lsr	r25
    16f6:	87 95       	ror	r24
    16f8:	77 95       	ror	r23
    16fa:	67 95       	ror	r22
    16fc:	2a 95       	dec	r18
    16fe:	d1 f7       	brne	.-12     	; 0x16f4 <main+0xa5c>
    1700:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__floatunsisf>
          _c *= CAPACITANCE_UF;
    1704:	23 e3       	ldi	r18, 0x33	; 51
    1706:	33 e3       	ldi	r19, 0x33	; 51
    1708:	43 e5       	ldi	r20, 0x53	; 83
    170a:	50 e4       	ldi	r21, 0x40	; 64
    170c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__mulsf3>
          _c *= 2;
    1710:	9b 01       	movw	r18, r22
    1712:	ac 01       	movw	r20, r24
    1714:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__addsf3>
    1718:	69 8b       	std	Y+17, r22	; 0x11
    171a:	7a 8b       	std	Y+18, r23	; 0x12
    171c:	8b 8b       	std	Y+19, r24	; 0x13
    171e:	9c 8b       	std	Y+20, r25	; 0x14
          byte x[4] = {1, 2, 4, 8};
    1720:	89 82       	std	Y+1, r8	; 0x01
    1722:	9a 82       	std	Y+2, r9	; 0x02
    1724:	bb 82       	std	Y+3, r11	; 0x03
    1726:	ac 82       	std	Y+4, r10	; 0x04
          _c /= x[menuPosition];
    1728:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menuPosition>
    172c:	e1 e0       	ldi	r30, 0x01	; 1
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	ec 0f       	add	r30, r28
    1732:	fd 1f       	adc	r31, r29
    1734:	e8 0f       	add	r30, r24
    1736:	f1 1d       	adc	r31, r1
    1738:	60 81       	ld	r22, Z
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__floatsisf>
    1744:	9b 01       	movw	r18, r22
    1746:	ac 01       	movw	r20, r24
    1748:	69 89       	ldd	r22, Y+17	; 0x11
    174a:	7a 89       	ldd	r23, Y+18	; 0x12
    174c:	8b 89       	ldd	r24, Y+19	; 0x13
    174e:	9c 89       	ldd	r25, Y+20	; 0x14
    1750:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divsf3>
          _c *= 100;
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	48 ec       	ldi	r20, 0xC8	; 200
    175a:	52 e4       	ldi	r21, 0x42	; 66
    175c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__mulsf3>
    1760:	69 8b       	std	Y+17, r22	; 0x11
    1762:	7a 8b       	std	Y+18, r23	; 0x12
    1764:	8b 8b       	std	Y+19, r24	; 0x13
    1766:	9c 8b       	std	Y+20, r25	; 0x14
      
          nextVolt *= 10000;
          nextVolt /= highVolt;
    1768:	a0 e1       	ldi	r26, 0x10	; 16
    176a:	b7 e2       	ldi	r27, 0x27	; 39
    176c:	a3 01       	movw	r20, r6
    176e:	92 01       	movw	r18, r4
    1770:	0e 94 64 10 	call	0x20c8	; 0x20c8 <__muluhisi3>
    1774:	a7 01       	movw	r20, r14
    1776:	96 01       	movw	r18, r12
    1778:	0e 94 42 10 	call	0x2084	; 0x2084 <__udivmodsi4>
    177c:	69 01       	movw	r12, r18
    177e:	7a 01       	movw	r14, r20
    1780:	20 93 84 01 	sts	0x0184, r18	; 0x800184 <nextVolt>
    1784:	30 93 85 01 	sts	0x0185, r19	; 0x800185 <nextVolt+0x1>
    1788:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <nextVolt+0x2>
    178c:	50 93 87 01 	sts	0x0187, r21	; 0x800187 <nextVolt+0x3>
	clkPin = _clkPin;
	dioPin = _dioPin;
}

void tm1637::forceLineState(uint8_t _digit, uint8_t _high, uint8_t _low){
  if (_high != 255) linesForcedHigh[_digit] = _high;
    1790:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <display+0xb>
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
    1794:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <display+0xf>
  refresh(_digit);
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
	clkPin = _clkPin;
	dioPin = _dioPin;
}

void tm1637::forceLineState(uint8_t _digit, uint8_t _high, uint8_t _low){
  if (_high != 255) linesForcedHigh[_digit] = _high;
    179e:	83 e7       	ldi	r24, 0x73	; 115
    17a0:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <display+0xc>
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
    17a4:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <display+0x10>
  refresh(_digit);
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
      
          display.forceLineState(2, 0, 0b01111111);
          display.forceLineState(3, 0b01110011, 0b00001100);
          display.showNumberDec(nextVolt);
    17ae:	c6 01       	movw	r24, r12
    17b0:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6tm163713showNumberDecEibhh.constprop.23>
          _t = millis() + 1000;
    17b4:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    17b8:	6b 01       	movw	r12, r22
    17ba:	7c 01       	movw	r14, r24
    17bc:	58 ee       	ldi	r21, 0xE8	; 232
    17be:	c5 0e       	add	r12, r21
    17c0:	53 e0       	ldi	r21, 0x03	; 3
    17c2:	d5 1e       	adc	r13, r21
    17c4:	e1 1c       	adc	r14, r1
    17c6:	f1 1c       	adc	r15, r1
          while (millis() < _t && BUTTON_NOT_PRESSED){};
    17c8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    17cc:	6c 15       	cp	r22, r12
    17ce:	7d 05       	cpc	r23, r13
    17d0:	8e 05       	cpc	r24, r14
    17d2:	9f 05       	cpc	r25, r15
    17d4:	10 f4       	brcc	.+4      	; 0x17da <main+0xb42>
    17d6:	34 99       	sbic	0x06, 4	; 6
    17d8:	f7 cf       	rjmp	.-18     	; 0x17c8 <main+0xb30>
          display.setSegments(nothing);
    17da:	ce 01       	movw	r24, r28
    17dc:	05 96       	adiw	r24, 0x05	; 5
    17de:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>
          display.clearLineState();
    17e2:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN6tm163714clearLineStateEv.constprop.21>
          _t = millis() + 250;
    17e6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    17ea:	6b 01       	movw	r12, r22
    17ec:	7c 01       	movw	r14, r24
    17ee:	aa ef       	ldi	r26, 0xFA	; 250
    17f0:	ca 0e       	add	r12, r26
    17f2:	d1 1c       	adc	r13, r1
    17f4:	e1 1c       	adc	r14, r1
    17f6:	f1 1c       	adc	r15, r1
          while (millis() < _t && BUTTON_NOT_PRESSED){};
    17f8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    17fc:	6c 15       	cp	r22, r12
    17fe:	7d 05       	cpc	r23, r13
    1800:	8e 05       	cpc	r24, r14
    1802:	9f 05       	cpc	r25, r15
    1804:	10 f4       	brcc	.+4      	; 0x180a <main+0xb72>
    1806:	34 99       	sbic	0x06, 4	; 6
    1808:	f7 cf       	rjmp	.-18     	; 0x17f8 <main+0xb60>
          nextVolt = _c;
    180a:	69 89       	ldd	r22, Y+17	; 0x11
    180c:	7a 89       	ldd	r23, Y+18	; 0x12
    180e:	8b 89       	ldd	r24, Y+19	; 0x13
    1810:	9c 89       	ldd	r25, Y+20	; 0x14
    1812:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__fixunssfsi>
    1816:	6b 01       	movw	r12, r22
    1818:	7c 01       	movw	r14, r24
    181a:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <nextVolt>
    181e:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <nextVolt+0x1>
    1822:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <nextVolt+0x2>
    1826:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <nextVolt+0x3>
	clkPin = _clkPin;
	dioPin = _dioPin;
}

void tm1637::forceLineState(uint8_t _digit, uint8_t _high, uint8_t _low){
  if (_high != 255) linesForcedHigh[_digit] = _high;
    182a:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <display+0xb>
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
    182e:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <display+0xf>
  refresh(_digit);
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
	clkPin = _clkPin;
	dioPin = _dioPin;
}

void tm1637::forceLineState(uint8_t _digit, uint8_t _high, uint8_t _low){
  if (_high != 255) linesForcedHigh[_digit] = _high;
    1838:	87 e7       	ldi	r24, 0x77	; 119
    183a:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <display+0xc>
  if (_low != 255) linesForcedLow[_digit] = 127 - _low;
    183e:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <display+0x10>
  refresh(_digit);
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN6tm16377refreshEh.constprop.28>
          display.forceLineState(2, 0, 0b01111111);
          display.forceLineState(3, 0b01110111, 0b00001000);
          display.showNumberDec(nextVolt);
    1848:	c6 01       	movw	r24, r12
    184a:	0e 94 04 03 	call	0x608	; 0x608 <_ZN6tm163713showNumberDecEibhh.constprop.23>
          _t = millis() + 1000;
    184e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1852:	6b 01       	movw	r12, r22
    1854:	7c 01       	movw	r14, r24
    1856:	b8 ee       	ldi	r27, 0xE8	; 232
    1858:	cb 0e       	add	r12, r27
    185a:	b3 e0       	ldi	r27, 0x03	; 3
    185c:	db 1e       	adc	r13, r27
    185e:	e1 1c       	adc	r14, r1
    1860:	f1 1c       	adc	r15, r1
          while (millis() < _t && BUTTON_NOT_PRESSED){};
    1862:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1866:	6c 15       	cp	r22, r12
    1868:	7d 05       	cpc	r23, r13
    186a:	8e 05       	cpc	r24, r14
    186c:	9f 05       	cpc	r25, r15
    186e:	10 f4       	brcc	.+4      	; 0x1874 <main+0xbdc>
    1870:	34 99       	sbic	0x06, 4	; 6
    1872:	f7 cf       	rjmp	.-18     	; 0x1862 <main+0xbca>
          display.setSegments(nothing);
    1874:	ce 01       	movw	r24, r28
    1876:	05 96       	adiw	r24, 0x05	; 5
    1878:	0e 94 bb 02 	call	0x576	; 0x576 <_ZN6tm163711setSegmentsEPKhhh.constprop.29>
          display.clearLineState();
    187c:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN6tm163714clearLineStateEv.constprop.21>
          _t = millis() + 250;
    1880:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <millis>
    1884:	6b 01       	movw	r12, r22
    1886:	7c 01       	movw	r14, r24
    1888:	2a ef       	ldi	r18, 0xFA	; 250
    188a:	c2 0e       	add	r12, r18
    188c:	d1 1c       	adc	r13, r1
    188e:	e1 1c       	adc	r14, r1
    1890:	f1 1c       	adc	r15, r1
    1892:	89 ce       	rjmp	.-750    	; 0x15a6 <main+0x90e>

void printHistory(){
  int e;
  e = 0;
  while (EEPROM.read(e) && EEPROM.read(e) != 255){
    switch(EEPROM.read(e)){
    1894:	82 30       	cpi	r24, 0x02	; 2
    1896:	19 f4       	brne	.+6      	; 0x189e <main+0xc06>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1898:	8a e5       	ldi	r24, 0x5A	; 90
    189a:	91 e0       	ldi	r25, 0x01	; 1
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <main+0xc14>
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <main+0xc0c>
    18a2:	3a c1       	rjmp	.+628    	; 0x1b18 <main+0xe80>
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <main+0xc18>
    18a8:	83 e5       	ldi	r24, 0x53	; 83
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>
    18b0:	8f e6       	ldi	r24, 0x6F	; 111
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
    18b8:	80 e5       	ldi	r24, 0x50	; 80
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>
      case 4:
      Serial.print("4.0 us");
      break;
    }
    Serial.println(" Flash");
    Serial.print(F("   Voltage: "));
    18c0:	8a e7       	ldi	r24, 0x7A	; 122
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN5Print5printEPK19__FlashStringHelper.constprop.7>
    unsigned int _t = EEPROM.read(e+1);
    18c8:	c8 01       	movw	r24, r16
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN11EEPROMClass4readEi.isra.0.lto_priv.47>
    _t = EEPROM.read(e+1);
    18d0:	c8 2e       	mov	r12, r24
    18d2:	d1 2c       	mov	r13, r1
    _t = _t <<8;
    18d4:	dc 2c       	mov	r13, r12
    18d6:	cc 24       	eor	r12, r12
    _t += EEPROM.read(e+2);
    18d8:	c8 01       	movw	r24, r16
    18da:	02 96       	adiw	r24, 0x02	; 2
    18dc:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN11EEPROMClass4readEi.isra.0.lto_priv.47>
    float _c;
    _c = _t / 8;
    18e0:	c8 0e       	add	r12, r24
    18e2:	d1 1c       	adc	r13, r1
    18e4:	43 e0       	ldi	r20, 0x03	; 3
    18e6:	d6 94       	lsr	r13
    18e8:	c7 94       	ror	r12
    18ea:	4a 95       	dec	r20
    18ec:	e1 f7       	brne	.-8      	; 0x18e6 <main+0xc4e>
    18ee:	e1 2c       	mov	r14, r1
    18f0:	f1 2c       	mov	r15, r1
    18f2:	c7 01       	movw	r24, r14
    18f4:	b6 01       	movw	r22, r12
    18f6:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__floatunsisf>
    18fa:	2b 01       	movw	r4, r22
    18fc:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    18fe:	4a e0       	ldi	r20, 0x0A	; 10
    1900:	c7 01       	movw	r24, r14
    1902:	b6 01       	movw	r22, r12
    1904:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN5Print11printNumberEmh.constprop.20>
    _t = _c;
    Serial.print(_t);
    Serial.print(F(" -> "));
    1908:	85 e7       	ldi	r24, 0x75	; 117
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN5Print5printEPK19__FlashStringHelper.constprop.7>
    _t = EEPROM.read(e+3);
    1910:	c8 01       	movw	r24, r16
    1912:	03 96       	adiw	r24, 0x03	; 3
    1914:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN11EEPROMClass4readEi.isra.0.lto_priv.47>
    1918:	e8 2e       	mov	r14, r24
    191a:	f1 2c       	mov	r15, r1
    _t = _t <<8;
    191c:	fe 2c       	mov	r15, r14
    191e:	ee 24       	eor	r14, r14
    _t += EEPROM.read(e+4);
    1920:	c8 01       	movw	r24, r16
    1922:	04 96       	adiw	r24, 0x04	; 4
    1924:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN11EEPROMClass4readEi.isra.0.lto_priv.47>
    1928:	e8 0e       	add	r14, r24
    192a:	f1 1c       	adc	r15, r1
    192c:	b7 01       	movw	r22, r14
    192e:	e3 e0       	ldi	r30, 0x03	; 3
    1930:	76 95       	lsr	r23
    1932:	67 95       	ror	r22
    1934:	ea 95       	dec	r30
    1936:	e1 f7       	brne	.-8      	; 0x1930 <main+0xc98>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	4a e0       	ldi	r20, 0x0A	; 10
    193e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN5Print11printNumberEmh.constprop.20>
    _t /= 8;
    Serial.print(_t);
    Serial.print(F("   Current: "));
    1942:	88 e6       	ldi	r24, 0x68	; 104
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN5Print5printEPK19__FlashStringHelper.constprop.7>
    _c = _c - float(_t / 8);
    194a:	b7 01       	movw	r22, r14
    194c:	f6 e0       	ldi	r31, 0x06	; 6
    194e:	76 95       	lsr	r23
    1950:	67 95       	ror	r22
    1952:	fa 95       	dec	r31
    1954:	e1 f7       	brne	.-8      	; 0x194e <main+0xcb6>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__floatunsisf>
    195e:	9b 01       	movw	r18, r22
    1960:	ac 01       	movw	r20, r24
    1962:	c3 01       	movw	r24, r6
    1964:	b2 01       	movw	r22, r4
    1966:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__subsf3>
    _c /= CAPACITANCE_UF;
    196a:	23 e3       	ldi	r18, 0x33	; 51
    196c:	33 e3       	ldi	r19, 0x33	; 51
    196e:	43 e5       	ldi	r20, 0x53	; 83
    1970:	50 e4       	ldi	r21, 0x40	; 64
    1972:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divsf3>
    1976:	6b 01       	movw	r12, r22
    1978:	7c 01       	movw	r14, r24
    _c *= 2;
    byte x[4] = {1, 2, 4, 8};
    197a:	5b a5       	ldd	r21, Y+43	; 0x2b
    197c:	59 83       	std	Y+1, r21	; 0x01
    197e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1980:	8a 83       	std	Y+2, r24	; 0x02
    1982:	2b 82       	std	Y+3, r2	; 0x03
    1984:	3c 82       	std	Y+4, r3	; 0x04
    _c /= x[EEPROM.read(e)-1];
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN11EEPROMClass4readEi.isra.0.lto_priv.47>
    198c:	78 2e       	mov	r7, r24
    198e:	a7 01       	movw	r20, r14
    1990:	96 01       	movw	r18, r12
    1992:	c7 01       	movw	r24, r14
    1994:	b6 01       	movw	r22, r12
    1996:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__addsf3>
    199a:	6b 01       	movw	r12, r22
    199c:	7c 01       	movw	r14, r24
    199e:	fe 01       	movw	r30, r28
    19a0:	e7 0d       	add	r30, r7
    19a2:	f1 1d       	adc	r31, r1
    19a4:	60 81       	ld	r22, Z
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__floatsisf>
    19b0:	9b 01       	movw	r18, r22
    19b2:	ac 01       	movw	r20, r24
    19b4:	c7 01       	movw	r24, r14
    19b6:	b6 01       	movw	r22, r12
    19b8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divsf3>
    19bc:	6b 01       	movw	r12, r22
    19be:	7c 01       	movw	r14, r24
    19c0:	2b 01       	movw	r4, r22
    19c2:	3c 01       	movw	r6, r24

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    19c4:	9b 01       	movw	r18, r22
    19c6:	ac 01       	movw	r20, r24
    19c8:	0e 94 29 10 	call	0x2052	; 0x2052 <__unordsf2>
    19cc:	88 23       	and	r24, r24
    19ce:	19 f0       	breq	.+6      	; 0x19d6 <main+0xd3e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    19d0:	86 e7       	ldi	r24, 0x76	; 118
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	1f c0       	rjmp	.+62     	; 0x1a14 <main+0xd7c>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    19d6:	d7 01       	movw	r26, r14
    19d8:	c6 01       	movw	r24, r12
    19da:	bf 77       	andi	r27, 0x7F	; 127
    19dc:	89 8b       	std	Y+17, r24	; 0x11
    19de:	9a 8b       	std	Y+18, r25	; 0x12
    19e0:	ab 8b       	std	Y+19, r26	; 0x13
    19e2:	bc 8b       	std	Y+20, r27	; 0x14
    19e4:	2f ef       	ldi	r18, 0xFF	; 255
    19e6:	3f ef       	ldi	r19, 0xFF	; 255
    19e8:	4f e7       	ldi	r20, 0x7F	; 127
    19ea:	5f e7       	ldi	r21, 0x7F	; 127
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	0e 94 29 10 	call	0x2052	; 0x2052 <__unordsf2>
    19f4:	81 11       	cpse	r24, r1
    19f6:	11 c0       	rjmp	.+34     	; 0x1a1a <main+0xd82>
    19f8:	2f ef       	ldi	r18, 0xFF	; 255
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	5f e7       	ldi	r21, 0x7F	; 127
    1a00:	69 89       	ldd	r22, Y+17	; 0x11
    1a02:	7a 89       	ldd	r23, Y+18	; 0x12
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__cmpsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <main+0xd82>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1a10:	8a e7       	ldi	r24, 0x7A	; 122
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>
    1a18:	78 c0       	rjmp	.+240    	; 0x1b0a <main+0xe72>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1a1a:	2f ef       	ldi	r18, 0xFF	; 255
    1a1c:	3f ef       	ldi	r19, 0xFF	; 255
    1a1e:	4f e7       	ldi	r20, 0x7F	; 127
    1a20:	5f e4       	ldi	r21, 0x4F	; 79
    1a22:	c7 01       	movw	r24, r14
    1a24:	b6 01       	movw	r22, r12
    1a26:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__gesf2>
    1a2a:	18 16       	cp	r1, r24
    1a2c:	1c f4       	brge	.+6      	; 0x1a34 <main+0xd9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1a2e:	8e e7       	ldi	r24, 0x7E	; 126
    1a30:	91 e0       	ldi	r25, 0x01	; 1
    1a32:	f0 cf       	rjmp	.-32     	; 0x1a14 <main+0xd7c>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1a34:	2f ef       	ldi	r18, 0xFF	; 255
    1a36:	3f ef       	ldi	r19, 0xFF	; 255
    1a38:	4f e7       	ldi	r20, 0x7F	; 127
    1a3a:	5f ec       	ldi	r21, 0xCF	; 207
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	b6 01       	movw	r22, r12
    1a40:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__cmpsf2>
    1a44:	87 fd       	sbrc	r24, 7
    1a46:	f3 cf       	rjmp	.-26     	; 0x1a2e <main+0xd96>
  
  // Handle negative numbers
  if (number < 0.0)
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	a9 01       	movw	r20, r18
    1a4e:	c7 01       	movw	r24, r14
    1a50:	b6 01       	movw	r22, r12
    1a52:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__cmpsf2>
    1a56:	87 ff       	sbrs	r24, 7
    1a58:	0b c0       	rjmp	.+22     	; 0x1a70 <main+0xdd8>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1a5a:	6d e2       	ldi	r22, 0x2D	; 45
    1a5c:	81 ea       	ldi	r24, 0xA1	; 161
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	0e 94 97 04 	call	0x92e	; 0x92e <_ZN14HardwareSerial5writeEh>
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    1a64:	26 01       	movw	r4, r12
    1a66:	37 01       	movw	r6, r14
    1a68:	77 fa       	bst	r7, 7
    1a6a:	70 94       	com	r7
    1a6c:	77 f8       	bld	r7, 7
    1a6e:	70 94       	com	r7
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    1a70:	2a e0       	ldi	r18, 0x0A	; 10
    1a72:	37 ed       	ldi	r19, 0xD7	; 215
    1a74:	43 ea       	ldi	r20, 0xA3	; 163
    1a76:	5b e3       	ldi	r21, 0x3B	; 59
    1a78:	c3 01       	movw	r24, r6
    1a7a:	b2 01       	movw	r22, r4
    1a7c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__addsf3>
    1a80:	2b 01       	movw	r4, r22
    1a82:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1a84:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__fixunssfsi>
    1a88:	6b 01       	movw	r12, r22
    1a8a:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    1a8c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__floatunsisf>
    1a90:	9b 01       	movw	r18, r22
    1a92:	ac 01       	movw	r20, r24
    1a94:	c3 01       	movw	r24, r6
    1a96:	b2 01       	movw	r22, r4
    1a98:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__subsf3>
    1a9c:	2b 01       	movw	r4, r22
    1a9e:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1aa0:	4a e0       	ldi	r20, 0x0A	; 10
    1aa2:	c7 01       	movw	r24, r14
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN5Print11printNumberEmh.constprop.20>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1aaa:	6e e2       	ldi	r22, 0x2E	; 46
    1aac:	81 ea       	ldi	r24, 0xA1	; 161
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	0e 94 97 04 	call	0x92e	; 0x92e <_ZN14HardwareSerial5writeEh>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e2       	ldi	r20, 0x20	; 32
    1aba:	51 e4       	ldi	r21, 0x41	; 65
    1abc:	c3 01       	movw	r24, r6
    1abe:	b2 01       	movw	r22, r4
    1ac0:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__mulsf3>
    1ac4:	2b 01       	movw	r4, r22
    1ac6:	3c 01       	movw	r6, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1ac8:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__fixunssfsi>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1acc:	6b 01       	movw	r12, r22
    1ace:	e1 2c       	mov	r14, r1
    1ad0:	f1 2c       	mov	r15, r1
    1ad2:	4a e0       	ldi	r20, 0x0A	; 10
    1ad4:	c7 01       	movw	r24, r14
    1ad6:	b6 01       	movw	r22, r12
    1ad8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN5Print11printNumberEmh.constprop.20>
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
    1adc:	c7 01       	movw	r24, r14
    1ade:	b6 01       	movw	r22, r12
    1ae0:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__floatunsisf>
    1ae4:	9b 01       	movw	r18, r22
    1ae6:	ac 01       	movw	r20, r24
    1ae8:	c3 01       	movw	r24, r6
    1aea:	b2 01       	movw	r22, r4
    1aec:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__subsf3>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__mulsf3>
    1afc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__fixunssfsi>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	4a e0       	ldi	r20, 0x0A	; 10
    1b06:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN5Print11printNumberEmh.constprop.20>
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
    1b0a:	80 e5       	ldi	r24, 0x50	; 80
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN5Print5writeEPKc.constprop.38>
    Serial.println(_c);
    e += 5;
    1b12:	0b 5f       	subi	r16, 0xFB	; 251
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	84 cb       	rjmp	.-2296   	; 0x1220 <main+0x588>

void printHistory(){
  int e;
  e = 0;
  while (EEPROM.read(e) && EEPROM.read(e) != 255){
    switch(EEPROM.read(e)){
    1b18:	83 30       	cpi	r24, 0x03	; 3
    1b1a:	19 f4       	brne	.+6      	; 0x1b22 <main+0xe8a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1b1c:	81 e6       	ldi	r24, 0x61	; 97
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	c5 ce       	rjmp	.-630    	; 0x18ac <main+0xc14>
    1b22:	84 30       	cpi	r24, 0x04	; 4
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <main+0xe90>
    1b26:	c4 ce       	rjmp	.-632    	; 0x18b0 <main+0xc18>
    1b28:	88 e6       	ldi	r24, 0x68	; 104
    1b2a:	91 e0       	ldi	r25, 0x01	; 1
    1b2c:	bf ce       	rjmp	.-642    	; 0x18ac <main+0xc14>

00001b2e <_GLOBAL__I_65535_0_RAY.ino.cpp.o.2032>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1b2e:	e1 ea       	ldi	r30, 0xA1	; 161
    1b30:	f1 e0       	ldi	r31, 0x01	; 1
    1b32:	13 82       	std	Z+3, r1	; 0x03
    1b34:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1b36:	88 ee       	ldi	r24, 0xE8	; 232
    1b38:	93 e0       	ldi	r25, 0x03	; 3
    1b3a:	a0 e0       	ldi	r26, 0x00	; 0
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	84 83       	std	Z+4, r24	; 0x04
    1b40:	95 83       	std	Z+5, r25	; 0x05
    1b42:	a6 83       	std	Z+6, r26	; 0x06
    1b44:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1b46:	88 e3       	ldi	r24, 0x38	; 56
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
    1b4e:	85 ec       	ldi	r24, 0xC5	; 197
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	95 87       	std	Z+13, r25	; 0x0d
    1b54:	84 87       	std	Z+12, r24	; 0x0c
    1b56:	84 ec       	ldi	r24, 0xC4	; 196
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	97 87       	std	Z+15, r25	; 0x0f
    1b5c:	86 87       	std	Z+14, r24	; 0x0e
    1b5e:	80 ec       	ldi	r24, 0xC0	; 192
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	91 8b       	std	Z+17, r25	; 0x11
    1b64:	80 8b       	std	Z+16, r24	; 0x10
    1b66:	81 ec       	ldi	r24, 0xC1	; 193
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	93 8b       	std	Z+19, r25	; 0x13
    1b6c:	82 8b       	std	Z+18, r24	; 0x12
    1b6e:	82 ec       	ldi	r24, 0xC2	; 194
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	95 8b       	std	Z+21, r25	; 0x15
    1b74:	84 8b       	std	Z+20, r24	; 0x14
    1b76:	86 ec       	ldi	r24, 0xC6	; 198
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	97 8b       	std	Z+23, r25	; 0x17
    1b7c:	86 8b       	std	Z+22, r24	; 0x16
    1b7e:	11 8e       	std	Z+25, r1	; 0x19
    1b80:	12 8e       	std	Z+26, r1	; 0x1a
    1b82:	13 8e       	std	Z+27, r1	; 0x1b
    1b84:	14 8e       	std	Z+28, r1	; 0x1c
#define WAIT 	delayMicroseconds(50);

const uint8_t numberSegment[] = {63, 6, 91, 79, 102, 109, 125, 7, 127, 111};


tm1637::tm1637(uint8_t _clkPin, uint8_t _dioPin)
    1b86:	ee e3       	ldi	r30, 0x3E	; 62
    1b88:	f2 e0       	ldi	r31, 0x02	; 2
    1b8a:	8f e0       	ldi	r24, 0x0F	; 15
    1b8c:	80 87       	std	Z+8, r24	; 0x08
    1b8e:	11 86       	std	Z+9, r1	; 0x09
    1b90:	12 86       	std	Z+10, r1	; 0x0a
    1b92:	13 86       	std	Z+11, r1	; 0x0b
    1b94:	14 86       	std	Z+12, r1	; 0x0c
    1b96:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZZ11readEncodervE2_p+0x4>
    1b9a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <_ZZ11readEncodervE2_p+0x5>
    1b9e:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <_ZZ11readEncodervE2_p+0x6>
    1ba2:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <_ZZ11readEncodervE2_p+0x7>
    1ba6:	85 87       	std	Z+13, r24	; 0x0d
    1ba8:	96 87       	std	Z+14, r25	; 0x0e
    1baa:	a7 87       	std	Z+15, r26	; 0x0f
    1bac:	b0 8b       	std	Z+16, r27	; 0x10
{
	clkPin = _clkPin;
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	80 83       	st	Z, r24
	dioPin = _dioPin;
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	81 83       	std	Z+1, r24	; 0x01
    1bb6:	08 95       	ret

00001bb8 <eeprom_read_byte>:
    1bb8:	f9 99       	sbic	0x1f, 1	; 31
    1bba:	fe cf       	rjmp	.-4      	; 0x1bb8 <eeprom_read_byte>
    1bbc:	92 bd       	out	0x22, r25	; 34
    1bbe:	81 bd       	out	0x21, r24	; 33
    1bc0:	f8 9a       	sbi	0x1f, 0	; 31
    1bc2:	99 27       	eor	r25, r25
    1bc4:	80 b5       	in	r24, 0x20	; 32
    1bc6:	08 95       	ret

00001bc8 <eeprom_write_byte>:
    1bc8:	26 2f       	mov	r18, r22

00001bca <eeprom_write_r18>:
    1bca:	f9 99       	sbic	0x1f, 1	; 31
    1bcc:	fe cf       	rjmp	.-4      	; 0x1bca <eeprom_write_r18>
    1bce:	1f ba       	out	0x1f, r1	; 31
    1bd0:	92 bd       	out	0x22, r25	; 34
    1bd2:	81 bd       	out	0x21, r24	; 33
    1bd4:	20 bd       	out	0x20, r18	; 32
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	fa 9a       	sbi	0x1f, 2	; 31
    1bdc:	f9 9a       	sbi	0x1f, 1	; 31
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	08 95       	ret

00001be4 <__subsf3>:
    1be4:	50 58       	subi	r21, 0x80	; 128

00001be6 <__addsf3>:
    1be6:	bb 27       	eor	r27, r27
    1be8:	aa 27       	eor	r26, r26
    1bea:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__addsf3x>
    1bee:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__fp_round>
    1bf2:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__fp_pscA>
    1bf6:	38 f0       	brcs	.+14     	; 0x1c06 <__addsf3+0x20>
    1bf8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fp_pscB>
    1bfc:	20 f0       	brcs	.+8      	; 0x1c06 <__addsf3+0x20>
    1bfe:	39 f4       	brne	.+14     	; 0x1c0e <__addsf3+0x28>
    1c00:	9f 3f       	cpi	r25, 0xFF	; 255
    1c02:	19 f4       	brne	.+6      	; 0x1c0a <__addsf3+0x24>
    1c04:	26 f4       	brtc	.+8      	; 0x1c0e <__addsf3+0x28>
    1c06:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__fp_nan>
    1c0a:	0e f4       	brtc	.+2      	; 0x1c0e <__addsf3+0x28>
    1c0c:	e0 95       	com	r30
    1c0e:	e7 fb       	bst	r30, 7
    1c10:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__fp_inf>

00001c14 <__addsf3x>:
    1c14:	e9 2f       	mov	r30, r25
    1c16:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__fp_split3>
    1c1a:	58 f3       	brcs	.-42     	; 0x1bf2 <__addsf3+0xc>
    1c1c:	ba 17       	cp	r27, r26
    1c1e:	62 07       	cpc	r22, r18
    1c20:	73 07       	cpc	r23, r19
    1c22:	84 07       	cpc	r24, r20
    1c24:	95 07       	cpc	r25, r21
    1c26:	20 f0       	brcs	.+8      	; 0x1c30 <__addsf3x+0x1c>
    1c28:	79 f4       	brne	.+30     	; 0x1c48 <__addsf3x+0x34>
    1c2a:	a6 f5       	brtc	.+104    	; 0x1c94 <__addsf3x+0x80>
    1c2c:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__fp_zero>
    1c30:	0e f4       	brtc	.+2      	; 0x1c34 <__addsf3x+0x20>
    1c32:	e0 95       	com	r30
    1c34:	0b 2e       	mov	r0, r27
    1c36:	ba 2f       	mov	r27, r26
    1c38:	a0 2d       	mov	r26, r0
    1c3a:	0b 01       	movw	r0, r22
    1c3c:	b9 01       	movw	r22, r18
    1c3e:	90 01       	movw	r18, r0
    1c40:	0c 01       	movw	r0, r24
    1c42:	ca 01       	movw	r24, r20
    1c44:	a0 01       	movw	r20, r0
    1c46:	11 24       	eor	r1, r1
    1c48:	ff 27       	eor	r31, r31
    1c4a:	59 1b       	sub	r21, r25
    1c4c:	99 f0       	breq	.+38     	; 0x1c74 <__addsf3x+0x60>
    1c4e:	59 3f       	cpi	r21, 0xF9	; 249
    1c50:	50 f4       	brcc	.+20     	; 0x1c66 <__addsf3x+0x52>
    1c52:	50 3e       	cpi	r21, 0xE0	; 224
    1c54:	68 f1       	brcs	.+90     	; 0x1cb0 <__addsf3x+0x9c>
    1c56:	1a 16       	cp	r1, r26
    1c58:	f0 40       	sbci	r31, 0x00	; 0
    1c5a:	a2 2f       	mov	r26, r18
    1c5c:	23 2f       	mov	r18, r19
    1c5e:	34 2f       	mov	r19, r20
    1c60:	44 27       	eor	r20, r20
    1c62:	58 5f       	subi	r21, 0xF8	; 248
    1c64:	f3 cf       	rjmp	.-26     	; 0x1c4c <__addsf3x+0x38>
    1c66:	46 95       	lsr	r20
    1c68:	37 95       	ror	r19
    1c6a:	27 95       	ror	r18
    1c6c:	a7 95       	ror	r26
    1c6e:	f0 40       	sbci	r31, 0x00	; 0
    1c70:	53 95       	inc	r21
    1c72:	c9 f7       	brne	.-14     	; 0x1c66 <__addsf3x+0x52>
    1c74:	7e f4       	brtc	.+30     	; 0x1c94 <__addsf3x+0x80>
    1c76:	1f 16       	cp	r1, r31
    1c78:	ba 0b       	sbc	r27, r26
    1c7a:	62 0b       	sbc	r22, r18
    1c7c:	73 0b       	sbc	r23, r19
    1c7e:	84 0b       	sbc	r24, r20
    1c80:	ba f0       	brmi	.+46     	; 0x1cb0 <__addsf3x+0x9c>
    1c82:	91 50       	subi	r25, 0x01	; 1
    1c84:	a1 f0       	breq	.+40     	; 0x1cae <__addsf3x+0x9a>
    1c86:	ff 0f       	add	r31, r31
    1c88:	bb 1f       	adc	r27, r27
    1c8a:	66 1f       	adc	r22, r22
    1c8c:	77 1f       	adc	r23, r23
    1c8e:	88 1f       	adc	r24, r24
    1c90:	c2 f7       	brpl	.-16     	; 0x1c82 <__addsf3x+0x6e>
    1c92:	0e c0       	rjmp	.+28     	; 0x1cb0 <__addsf3x+0x9c>
    1c94:	ba 0f       	add	r27, r26
    1c96:	62 1f       	adc	r22, r18
    1c98:	73 1f       	adc	r23, r19
    1c9a:	84 1f       	adc	r24, r20
    1c9c:	48 f4       	brcc	.+18     	; 0x1cb0 <__addsf3x+0x9c>
    1c9e:	87 95       	ror	r24
    1ca0:	77 95       	ror	r23
    1ca2:	67 95       	ror	r22
    1ca4:	b7 95       	ror	r27
    1ca6:	f7 95       	ror	r31
    1ca8:	9e 3f       	cpi	r25, 0xFE	; 254
    1caa:	08 f0       	brcs	.+2      	; 0x1cae <__addsf3x+0x9a>
    1cac:	b0 cf       	rjmp	.-160    	; 0x1c0e <__addsf3+0x28>
    1cae:	93 95       	inc	r25
    1cb0:	88 0f       	add	r24, r24
    1cb2:	08 f0       	brcs	.+2      	; 0x1cb6 <__addsf3x+0xa2>
    1cb4:	99 27       	eor	r25, r25
    1cb6:	ee 0f       	add	r30, r30
    1cb8:	97 95       	ror	r25
    1cba:	87 95       	ror	r24
    1cbc:	08 95       	ret

00001cbe <__cmpsf2>:
    1cbe:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__fp_cmp>
    1cc2:	08 f4       	brcc	.+2      	; 0x1cc6 <__cmpsf2+0x8>
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	08 95       	ret

00001cc8 <__divsf3>:
    1cc8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__divsf3x>
    1ccc:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__fp_round>
    1cd0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fp_pscB>
    1cd4:	58 f0       	brcs	.+22     	; 0x1cec <__divsf3+0x24>
    1cd6:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__fp_pscA>
    1cda:	40 f0       	brcs	.+16     	; 0x1cec <__divsf3+0x24>
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <__divsf3+0x20>
    1cde:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce0:	29 f0       	breq	.+10     	; 0x1cec <__divsf3+0x24>
    1ce2:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__fp_inf>
    1ce6:	51 11       	cpse	r21, r1
    1ce8:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__fp_szero>
    1cec:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__fp_nan>

00001cf0 <__divsf3x>:
    1cf0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__fp_split3>
    1cf4:	68 f3       	brcs	.-38     	; 0x1cd0 <__divsf3+0x8>

00001cf6 <__divsf3_pse>:
    1cf6:	99 23       	and	r25, r25
    1cf8:	b1 f3       	breq	.-20     	; 0x1ce6 <__divsf3+0x1e>
    1cfa:	55 23       	and	r21, r21
    1cfc:	91 f3       	breq	.-28     	; 0x1ce2 <__divsf3+0x1a>
    1cfe:	95 1b       	sub	r25, r21
    1d00:	55 0b       	sbc	r21, r21
    1d02:	bb 27       	eor	r27, r27
    1d04:	aa 27       	eor	r26, r26
    1d06:	62 17       	cp	r22, r18
    1d08:	73 07       	cpc	r23, r19
    1d0a:	84 07       	cpc	r24, r20
    1d0c:	38 f0       	brcs	.+14     	; 0x1d1c <__divsf3_pse+0x26>
    1d0e:	9f 5f       	subi	r25, 0xFF	; 255
    1d10:	5f 4f       	sbci	r21, 0xFF	; 255
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
    1d16:	44 1f       	adc	r20, r20
    1d18:	aa 1f       	adc	r26, r26
    1d1a:	a9 f3       	breq	.-22     	; 0x1d06 <__divsf3_pse+0x10>
    1d1c:	35 d0       	rcall	.+106    	; 0x1d88 <__divsf3_pse+0x92>
    1d1e:	0e 2e       	mov	r0, r30
    1d20:	3a f0       	brmi	.+14     	; 0x1d30 <__divsf3_pse+0x3a>
    1d22:	e0 e8       	ldi	r30, 0x80	; 128
    1d24:	32 d0       	rcall	.+100    	; 0x1d8a <__divsf3_pse+0x94>
    1d26:	91 50       	subi	r25, 0x01	; 1
    1d28:	50 40       	sbci	r21, 0x00	; 0
    1d2a:	e6 95       	lsr	r30
    1d2c:	00 1c       	adc	r0, r0
    1d2e:	ca f7       	brpl	.-14     	; 0x1d22 <__divsf3_pse+0x2c>
    1d30:	2b d0       	rcall	.+86     	; 0x1d88 <__divsf3_pse+0x92>
    1d32:	fe 2f       	mov	r31, r30
    1d34:	29 d0       	rcall	.+82     	; 0x1d88 <__divsf3_pse+0x92>
    1d36:	66 0f       	add	r22, r22
    1d38:	77 1f       	adc	r23, r23
    1d3a:	88 1f       	adc	r24, r24
    1d3c:	bb 1f       	adc	r27, r27
    1d3e:	26 17       	cp	r18, r22
    1d40:	37 07       	cpc	r19, r23
    1d42:	48 07       	cpc	r20, r24
    1d44:	ab 07       	cpc	r26, r27
    1d46:	b0 e8       	ldi	r27, 0x80	; 128
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <__divsf3_pse+0x56>
    1d4a:	bb 0b       	sbc	r27, r27
    1d4c:	80 2d       	mov	r24, r0
    1d4e:	bf 01       	movw	r22, r30
    1d50:	ff 27       	eor	r31, r31
    1d52:	93 58       	subi	r25, 0x83	; 131
    1d54:	5f 4f       	sbci	r21, 0xFF	; 255
    1d56:	3a f0       	brmi	.+14     	; 0x1d66 <__divsf3_pse+0x70>
    1d58:	9e 3f       	cpi	r25, 0xFE	; 254
    1d5a:	51 05       	cpc	r21, r1
    1d5c:	78 f0       	brcs	.+30     	; 0x1d7c <__divsf3_pse+0x86>
    1d5e:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__fp_inf>
    1d62:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__fp_szero>
    1d66:	5f 3f       	cpi	r21, 0xFF	; 255
    1d68:	e4 f3       	brlt	.-8      	; 0x1d62 <__divsf3_pse+0x6c>
    1d6a:	98 3e       	cpi	r25, 0xE8	; 232
    1d6c:	d4 f3       	brlt	.-12     	; 0x1d62 <__divsf3_pse+0x6c>
    1d6e:	86 95       	lsr	r24
    1d70:	77 95       	ror	r23
    1d72:	67 95       	ror	r22
    1d74:	b7 95       	ror	r27
    1d76:	f7 95       	ror	r31
    1d78:	9f 5f       	subi	r25, 0xFF	; 255
    1d7a:	c9 f7       	brne	.-14     	; 0x1d6e <__divsf3_pse+0x78>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	91 1d       	adc	r25, r1
    1d80:	96 95       	lsr	r25
    1d82:	87 95       	ror	r24
    1d84:	97 f9       	bld	r25, 7
    1d86:	08 95       	ret
    1d88:	e1 e0       	ldi	r30, 0x01	; 1
    1d8a:	66 0f       	add	r22, r22
    1d8c:	77 1f       	adc	r23, r23
    1d8e:	88 1f       	adc	r24, r24
    1d90:	bb 1f       	adc	r27, r27
    1d92:	62 17       	cp	r22, r18
    1d94:	73 07       	cpc	r23, r19
    1d96:	84 07       	cpc	r24, r20
    1d98:	ba 07       	cpc	r27, r26
    1d9a:	20 f0       	brcs	.+8      	; 0x1da4 <__divsf3_pse+0xae>
    1d9c:	62 1b       	sub	r22, r18
    1d9e:	73 0b       	sbc	r23, r19
    1da0:	84 0b       	sbc	r24, r20
    1da2:	ba 0b       	sbc	r27, r26
    1da4:	ee 1f       	adc	r30, r30
    1da6:	88 f7       	brcc	.-30     	; 0x1d8a <__divsf3_pse+0x94>
    1da8:	e0 95       	com	r30
    1daa:	08 95       	ret

00001dac <__fixunssfsi>:
    1dac:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__fp_splitA>
    1db0:	88 f0       	brcs	.+34     	; 0x1dd4 <__fixunssfsi+0x28>
    1db2:	9f 57       	subi	r25, 0x7F	; 127
    1db4:	98 f0       	brcs	.+38     	; 0x1ddc <__fixunssfsi+0x30>
    1db6:	b9 2f       	mov	r27, r25
    1db8:	99 27       	eor	r25, r25
    1dba:	b7 51       	subi	r27, 0x17	; 23
    1dbc:	b0 f0       	brcs	.+44     	; 0x1dea <__fixunssfsi+0x3e>
    1dbe:	e1 f0       	breq	.+56     	; 0x1df8 <__fixunssfsi+0x4c>
    1dc0:	66 0f       	add	r22, r22
    1dc2:	77 1f       	adc	r23, r23
    1dc4:	88 1f       	adc	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	1a f0       	brmi	.+6      	; 0x1dd0 <__fixunssfsi+0x24>
    1dca:	ba 95       	dec	r27
    1dcc:	c9 f7       	brne	.-14     	; 0x1dc0 <__fixunssfsi+0x14>
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <__fixunssfsi+0x4c>
    1dd0:	b1 30       	cpi	r27, 0x01	; 1
    1dd2:	91 f0       	breq	.+36     	; 0x1df8 <__fixunssfsi+0x4c>
    1dd4:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__fp_zero>
    1dd8:	b1 e0       	ldi	r27, 0x01	; 1
    1dda:	08 95       	ret
    1ddc:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__fp_zero>
    1de0:	67 2f       	mov	r22, r23
    1de2:	78 2f       	mov	r23, r24
    1de4:	88 27       	eor	r24, r24
    1de6:	b8 5f       	subi	r27, 0xF8	; 248
    1de8:	39 f0       	breq	.+14     	; 0x1df8 <__fixunssfsi+0x4c>
    1dea:	b9 3f       	cpi	r27, 0xF9	; 249
    1dec:	cc f3       	brlt	.-14     	; 0x1de0 <__fixunssfsi+0x34>
    1dee:	86 95       	lsr	r24
    1df0:	77 95       	ror	r23
    1df2:	67 95       	ror	r22
    1df4:	b3 95       	inc	r27
    1df6:	d9 f7       	brne	.-10     	; 0x1dee <__fixunssfsi+0x42>
    1df8:	3e f4       	brtc	.+14     	; 0x1e08 <__fixunssfsi+0x5c>
    1dfa:	90 95       	com	r25
    1dfc:	80 95       	com	r24
    1dfe:	70 95       	com	r23
    1e00:	61 95       	neg	r22
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	8f 4f       	sbci	r24, 0xFF	; 255
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	08 95       	ret

00001e0a <__floatunsisf>:
    1e0a:	e8 94       	clt
    1e0c:	09 c0       	rjmp	.+18     	; 0x1e20 <__floatsisf+0x12>

00001e0e <__floatsisf>:
    1e0e:	97 fb       	bst	r25, 7
    1e10:	3e f4       	brtc	.+14     	; 0x1e20 <__floatsisf+0x12>
    1e12:	90 95       	com	r25
    1e14:	80 95       	com	r24
    1e16:	70 95       	com	r23
    1e18:	61 95       	neg	r22
    1e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e20:	99 23       	and	r25, r25
    1e22:	a9 f0       	breq	.+42     	; 0x1e4e <__floatsisf+0x40>
    1e24:	f9 2f       	mov	r31, r25
    1e26:	96 e9       	ldi	r25, 0x96	; 150
    1e28:	bb 27       	eor	r27, r27
    1e2a:	93 95       	inc	r25
    1e2c:	f6 95       	lsr	r31
    1e2e:	87 95       	ror	r24
    1e30:	77 95       	ror	r23
    1e32:	67 95       	ror	r22
    1e34:	b7 95       	ror	r27
    1e36:	f1 11       	cpse	r31, r1
    1e38:	f8 cf       	rjmp	.-16     	; 0x1e2a <__floatsisf+0x1c>
    1e3a:	fa f4       	brpl	.+62     	; 0x1e7a <__floatsisf+0x6c>
    1e3c:	bb 0f       	add	r27, r27
    1e3e:	11 f4       	brne	.+4      	; 0x1e44 <__floatsisf+0x36>
    1e40:	60 ff       	sbrs	r22, 0
    1e42:	1b c0       	rjmp	.+54     	; 0x1e7a <__floatsisf+0x6c>
    1e44:	6f 5f       	subi	r22, 0xFF	; 255
    1e46:	7f 4f       	sbci	r23, 0xFF	; 255
    1e48:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	16 c0       	rjmp	.+44     	; 0x1e7a <__floatsisf+0x6c>
    1e4e:	88 23       	and	r24, r24
    1e50:	11 f0       	breq	.+4      	; 0x1e56 <__floatsisf+0x48>
    1e52:	96 e9       	ldi	r25, 0x96	; 150
    1e54:	11 c0       	rjmp	.+34     	; 0x1e78 <__floatsisf+0x6a>
    1e56:	77 23       	and	r23, r23
    1e58:	21 f0       	breq	.+8      	; 0x1e62 <__floatsisf+0x54>
    1e5a:	9e e8       	ldi	r25, 0x8E	; 142
    1e5c:	87 2f       	mov	r24, r23
    1e5e:	76 2f       	mov	r23, r22
    1e60:	05 c0       	rjmp	.+10     	; 0x1e6c <__floatsisf+0x5e>
    1e62:	66 23       	and	r22, r22
    1e64:	71 f0       	breq	.+28     	; 0x1e82 <__floatsisf+0x74>
    1e66:	96 e8       	ldi	r25, 0x86	; 134
    1e68:	86 2f       	mov	r24, r22
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	2a f0       	brmi	.+10     	; 0x1e7a <__floatsisf+0x6c>
    1e70:	9a 95       	dec	r25
    1e72:	66 0f       	add	r22, r22
    1e74:	77 1f       	adc	r23, r23
    1e76:	88 1f       	adc	r24, r24
    1e78:	da f7       	brpl	.-10     	; 0x1e70 <__floatsisf+0x62>
    1e7a:	88 0f       	add	r24, r24
    1e7c:	96 95       	lsr	r25
    1e7e:	87 95       	ror	r24
    1e80:	97 f9       	bld	r25, 7
    1e82:	08 95       	ret

00001e84 <__fp_cmp>:
    1e84:	99 0f       	add	r25, r25
    1e86:	00 08       	sbc	r0, r0
    1e88:	55 0f       	add	r21, r21
    1e8a:	aa 0b       	sbc	r26, r26
    1e8c:	e0 e8       	ldi	r30, 0x80	; 128
    1e8e:	fe ef       	ldi	r31, 0xFE	; 254
    1e90:	16 16       	cp	r1, r22
    1e92:	17 06       	cpc	r1, r23
    1e94:	e8 07       	cpc	r30, r24
    1e96:	f9 07       	cpc	r31, r25
    1e98:	c0 f0       	brcs	.+48     	; 0x1eca <__fp_cmp+0x46>
    1e9a:	12 16       	cp	r1, r18
    1e9c:	13 06       	cpc	r1, r19
    1e9e:	e4 07       	cpc	r30, r20
    1ea0:	f5 07       	cpc	r31, r21
    1ea2:	98 f0       	brcs	.+38     	; 0x1eca <__fp_cmp+0x46>
    1ea4:	62 1b       	sub	r22, r18
    1ea6:	73 0b       	sbc	r23, r19
    1ea8:	84 0b       	sbc	r24, r20
    1eaa:	95 0b       	sbc	r25, r21
    1eac:	39 f4       	brne	.+14     	; 0x1ebc <__fp_cmp+0x38>
    1eae:	0a 26       	eor	r0, r26
    1eb0:	61 f0       	breq	.+24     	; 0x1eca <__fp_cmp+0x46>
    1eb2:	23 2b       	or	r18, r19
    1eb4:	24 2b       	or	r18, r20
    1eb6:	25 2b       	or	r18, r21
    1eb8:	21 f4       	brne	.+8      	; 0x1ec2 <__fp_cmp+0x3e>
    1eba:	08 95       	ret
    1ebc:	0a 26       	eor	r0, r26
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <__fp_cmp+0x3e>
    1ec0:	a1 40       	sbci	r26, 0x01	; 1
    1ec2:	a6 95       	lsr	r26
    1ec4:	8f ef       	ldi	r24, 0xFF	; 255
    1ec6:	81 1d       	adc	r24, r1
    1ec8:	81 1d       	adc	r24, r1
    1eca:	08 95       	ret

00001ecc <__fp_inf>:
    1ecc:	97 f9       	bld	r25, 7
    1ece:	9f 67       	ori	r25, 0x7F	; 127
    1ed0:	80 e8       	ldi	r24, 0x80	; 128
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	08 95       	ret

00001ed8 <__fp_nan>:
    1ed8:	9f ef       	ldi	r25, 0xFF	; 255
    1eda:	80 ec       	ldi	r24, 0xC0	; 192
    1edc:	08 95       	ret

00001ede <__fp_pscA>:
    1ede:	00 24       	eor	r0, r0
    1ee0:	0a 94       	dec	r0
    1ee2:	16 16       	cp	r1, r22
    1ee4:	17 06       	cpc	r1, r23
    1ee6:	18 06       	cpc	r1, r24
    1ee8:	09 06       	cpc	r0, r25
    1eea:	08 95       	ret

00001eec <__fp_pscB>:
    1eec:	00 24       	eor	r0, r0
    1eee:	0a 94       	dec	r0
    1ef0:	12 16       	cp	r1, r18
    1ef2:	13 06       	cpc	r1, r19
    1ef4:	14 06       	cpc	r1, r20
    1ef6:	05 06       	cpc	r0, r21
    1ef8:	08 95       	ret

00001efa <__fp_round>:
    1efa:	09 2e       	mov	r0, r25
    1efc:	03 94       	inc	r0
    1efe:	00 0c       	add	r0, r0
    1f00:	11 f4       	brne	.+4      	; 0x1f06 <__fp_round+0xc>
    1f02:	88 23       	and	r24, r24
    1f04:	52 f0       	brmi	.+20     	; 0x1f1a <__fp_round+0x20>
    1f06:	bb 0f       	add	r27, r27
    1f08:	40 f4       	brcc	.+16     	; 0x1f1a <__fp_round+0x20>
    1f0a:	bf 2b       	or	r27, r31
    1f0c:	11 f4       	brne	.+4      	; 0x1f12 <__fp_round+0x18>
    1f0e:	60 ff       	sbrs	r22, 0
    1f10:	04 c0       	rjmp	.+8      	; 0x1f1a <__fp_round+0x20>
    1f12:	6f 5f       	subi	r22, 0xFF	; 255
    1f14:	7f 4f       	sbci	r23, 0xFF	; 255
    1f16:	8f 4f       	sbci	r24, 0xFF	; 255
    1f18:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1a:	08 95       	ret

00001f1c <__fp_split3>:
    1f1c:	57 fd       	sbrc	r21, 7
    1f1e:	90 58       	subi	r25, 0x80	; 128
    1f20:	44 0f       	add	r20, r20
    1f22:	55 1f       	adc	r21, r21
    1f24:	59 f0       	breq	.+22     	; 0x1f3c <__fp_splitA+0x10>
    1f26:	5f 3f       	cpi	r21, 0xFF	; 255
    1f28:	71 f0       	breq	.+28     	; 0x1f46 <__fp_splitA+0x1a>
    1f2a:	47 95       	ror	r20

00001f2c <__fp_splitA>:
    1f2c:	88 0f       	add	r24, r24
    1f2e:	97 fb       	bst	r25, 7
    1f30:	99 1f       	adc	r25, r25
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <__fp_splitA+0x20>
    1f34:	9f 3f       	cpi	r25, 0xFF	; 255
    1f36:	79 f0       	breq	.+30     	; 0x1f56 <__fp_splitA+0x2a>
    1f38:	87 95       	ror	r24
    1f3a:	08 95       	ret
    1f3c:	12 16       	cp	r1, r18
    1f3e:	13 06       	cpc	r1, r19
    1f40:	14 06       	cpc	r1, r20
    1f42:	55 1f       	adc	r21, r21
    1f44:	f2 cf       	rjmp	.-28     	; 0x1f2a <__fp_split3+0xe>
    1f46:	46 95       	lsr	r20
    1f48:	f1 df       	rcall	.-30     	; 0x1f2c <__fp_splitA>
    1f4a:	08 c0       	rjmp	.+16     	; 0x1f5c <__fp_splitA+0x30>
    1f4c:	16 16       	cp	r1, r22
    1f4e:	17 06       	cpc	r1, r23
    1f50:	18 06       	cpc	r1, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	f1 cf       	rjmp	.-30     	; 0x1f38 <__fp_splitA+0xc>
    1f56:	86 95       	lsr	r24
    1f58:	71 05       	cpc	r23, r1
    1f5a:	61 05       	cpc	r22, r1
    1f5c:	08 94       	sec
    1f5e:	08 95       	ret

00001f60 <__fp_zero>:
    1f60:	e8 94       	clt

00001f62 <__fp_szero>:
    1f62:	bb 27       	eor	r27, r27
    1f64:	66 27       	eor	r22, r22
    1f66:	77 27       	eor	r23, r23
    1f68:	cb 01       	movw	r24, r22
    1f6a:	97 f9       	bld	r25, 7
    1f6c:	08 95       	ret

00001f6e <__gesf2>:
    1f6e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__fp_cmp>
    1f72:	08 f4       	brcc	.+2      	; 0x1f76 <__gesf2+0x8>
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	08 95       	ret

00001f78 <__mulsf3>:
    1f78:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__mulsf3x>
    1f7c:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__fp_round>
    1f80:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__fp_pscA>
    1f84:	38 f0       	brcs	.+14     	; 0x1f94 <__mulsf3+0x1c>
    1f86:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__fp_pscB>
    1f8a:	20 f0       	brcs	.+8      	; 0x1f94 <__mulsf3+0x1c>
    1f8c:	95 23       	and	r25, r21
    1f8e:	11 f0       	breq	.+4      	; 0x1f94 <__mulsf3+0x1c>
    1f90:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__fp_inf>
    1f94:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__fp_nan>
    1f98:	11 24       	eor	r1, r1
    1f9a:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__fp_szero>

00001f9e <__mulsf3x>:
    1f9e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__fp_split3>
    1fa2:	70 f3       	brcs	.-36     	; 0x1f80 <__mulsf3+0x8>

00001fa4 <__mulsf3_pse>:
    1fa4:	95 9f       	mul	r25, r21
    1fa6:	c1 f3       	breq	.-16     	; 0x1f98 <__mulsf3+0x20>
    1fa8:	95 0f       	add	r25, r21
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	55 1f       	adc	r21, r21
    1fae:	62 9f       	mul	r22, r18
    1fb0:	f0 01       	movw	r30, r0
    1fb2:	72 9f       	mul	r23, r18
    1fb4:	bb 27       	eor	r27, r27
    1fb6:	f0 0d       	add	r31, r0
    1fb8:	b1 1d       	adc	r27, r1
    1fba:	63 9f       	mul	r22, r19
    1fbc:	aa 27       	eor	r26, r26
    1fbe:	f0 0d       	add	r31, r0
    1fc0:	b1 1d       	adc	r27, r1
    1fc2:	aa 1f       	adc	r26, r26
    1fc4:	64 9f       	mul	r22, r20
    1fc6:	66 27       	eor	r22, r22
    1fc8:	b0 0d       	add	r27, r0
    1fca:	a1 1d       	adc	r26, r1
    1fcc:	66 1f       	adc	r22, r22
    1fce:	82 9f       	mul	r24, r18
    1fd0:	22 27       	eor	r18, r18
    1fd2:	b0 0d       	add	r27, r0
    1fd4:	a1 1d       	adc	r26, r1
    1fd6:	62 1f       	adc	r22, r18
    1fd8:	73 9f       	mul	r23, r19
    1fda:	b0 0d       	add	r27, r0
    1fdc:	a1 1d       	adc	r26, r1
    1fde:	62 1f       	adc	r22, r18
    1fe0:	83 9f       	mul	r24, r19
    1fe2:	a0 0d       	add	r26, r0
    1fe4:	61 1d       	adc	r22, r1
    1fe6:	22 1f       	adc	r18, r18
    1fe8:	74 9f       	mul	r23, r20
    1fea:	33 27       	eor	r19, r19
    1fec:	a0 0d       	add	r26, r0
    1fee:	61 1d       	adc	r22, r1
    1ff0:	23 1f       	adc	r18, r19
    1ff2:	84 9f       	mul	r24, r20
    1ff4:	60 0d       	add	r22, r0
    1ff6:	21 1d       	adc	r18, r1
    1ff8:	82 2f       	mov	r24, r18
    1ffa:	76 2f       	mov	r23, r22
    1ffc:	6a 2f       	mov	r22, r26
    1ffe:	11 24       	eor	r1, r1
    2000:	9f 57       	subi	r25, 0x7F	; 127
    2002:	50 40       	sbci	r21, 0x00	; 0
    2004:	9a f0       	brmi	.+38     	; 0x202c <__mulsf3_pse+0x88>
    2006:	f1 f0       	breq	.+60     	; 0x2044 <__mulsf3_pse+0xa0>
    2008:	88 23       	and	r24, r24
    200a:	4a f0       	brmi	.+18     	; 0x201e <__mulsf3_pse+0x7a>
    200c:	ee 0f       	add	r30, r30
    200e:	ff 1f       	adc	r31, r31
    2010:	bb 1f       	adc	r27, r27
    2012:	66 1f       	adc	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	91 50       	subi	r25, 0x01	; 1
    201a:	50 40       	sbci	r21, 0x00	; 0
    201c:	a9 f7       	brne	.-22     	; 0x2008 <__mulsf3_pse+0x64>
    201e:	9e 3f       	cpi	r25, 0xFE	; 254
    2020:	51 05       	cpc	r21, r1
    2022:	80 f0       	brcs	.+32     	; 0x2044 <__mulsf3_pse+0xa0>
    2024:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__fp_inf>
    2028:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__fp_szero>
    202c:	5f 3f       	cpi	r21, 0xFF	; 255
    202e:	e4 f3       	brlt	.-8      	; 0x2028 <__mulsf3_pse+0x84>
    2030:	98 3e       	cpi	r25, 0xE8	; 232
    2032:	d4 f3       	brlt	.-12     	; 0x2028 <__mulsf3_pse+0x84>
    2034:	86 95       	lsr	r24
    2036:	77 95       	ror	r23
    2038:	67 95       	ror	r22
    203a:	b7 95       	ror	r27
    203c:	f7 95       	ror	r31
    203e:	e7 95       	ror	r30
    2040:	9f 5f       	subi	r25, 0xFF	; 255
    2042:	c1 f7       	brne	.-16     	; 0x2034 <__mulsf3_pse+0x90>
    2044:	fe 2b       	or	r31, r30
    2046:	88 0f       	add	r24, r24
    2048:	91 1d       	adc	r25, r1
    204a:	96 95       	lsr	r25
    204c:	87 95       	ror	r24
    204e:	97 f9       	bld	r25, 7
    2050:	08 95       	ret

00002052 <__unordsf2>:
    2052:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__fp_cmp>
    2056:	88 0b       	sbc	r24, r24
    2058:	99 0b       	sbc	r25, r25
    205a:	08 95       	ret

0000205c <__divmodhi4>:
    205c:	97 fb       	bst	r25, 7
    205e:	07 2e       	mov	r0, r23
    2060:	16 f4       	brtc	.+4      	; 0x2066 <__divmodhi4+0xa>
    2062:	00 94       	com	r0
    2064:	07 d0       	rcall	.+14     	; 0x2074 <__divmodhi4_neg1>
    2066:	77 fd       	sbrc	r23, 7
    2068:	09 d0       	rcall	.+18     	; 0x207c <__divmodhi4_neg2>
    206a:	0e 94 6f 10 	call	0x20de	; 0x20de <__udivmodhi4>
    206e:	07 fc       	sbrc	r0, 7
    2070:	05 d0       	rcall	.+10     	; 0x207c <__divmodhi4_neg2>
    2072:	3e f4       	brtc	.+14     	; 0x2082 <__divmodhi4_exit>

00002074 <__divmodhi4_neg1>:
    2074:	90 95       	com	r25
    2076:	81 95       	neg	r24
    2078:	9f 4f       	sbci	r25, 0xFF	; 255
    207a:	08 95       	ret

0000207c <__divmodhi4_neg2>:
    207c:	70 95       	com	r23
    207e:	61 95       	neg	r22
    2080:	7f 4f       	sbci	r23, 0xFF	; 255

00002082 <__divmodhi4_exit>:
    2082:	08 95       	ret

00002084 <__udivmodsi4>:
    2084:	a1 e2       	ldi	r26, 0x21	; 33
    2086:	1a 2e       	mov	r1, r26
    2088:	aa 1b       	sub	r26, r26
    208a:	bb 1b       	sub	r27, r27
    208c:	fd 01       	movw	r30, r26
    208e:	0d c0       	rjmp	.+26     	; 0x20aa <__udivmodsi4_ep>

00002090 <__udivmodsi4_loop>:
    2090:	aa 1f       	adc	r26, r26
    2092:	bb 1f       	adc	r27, r27
    2094:	ee 1f       	adc	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	a2 17       	cp	r26, r18
    209a:	b3 07       	cpc	r27, r19
    209c:	e4 07       	cpc	r30, r20
    209e:	f5 07       	cpc	r31, r21
    20a0:	20 f0       	brcs	.+8      	; 0x20aa <__udivmodsi4_ep>
    20a2:	a2 1b       	sub	r26, r18
    20a4:	b3 0b       	sbc	r27, r19
    20a6:	e4 0b       	sbc	r30, r20
    20a8:	f5 0b       	sbc	r31, r21

000020aa <__udivmodsi4_ep>:
    20aa:	66 1f       	adc	r22, r22
    20ac:	77 1f       	adc	r23, r23
    20ae:	88 1f       	adc	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	1a 94       	dec	r1
    20b4:	69 f7       	brne	.-38     	; 0x2090 <__udivmodsi4_loop>
    20b6:	60 95       	com	r22
    20b8:	70 95       	com	r23
    20ba:	80 95       	com	r24
    20bc:	90 95       	com	r25
    20be:	9b 01       	movw	r18, r22
    20c0:	ac 01       	movw	r20, r24
    20c2:	bd 01       	movw	r22, r26
    20c4:	cf 01       	movw	r24, r30
    20c6:	08 95       	ret

000020c8 <__muluhisi3>:
    20c8:	0e 94 89 10 	call	0x2112	; 0x2112 <__umulhisi3>
    20cc:	a5 9f       	mul	r26, r21
    20ce:	90 0d       	add	r25, r0
    20d0:	b4 9f       	mul	r27, r20
    20d2:	90 0d       	add	r25, r0
    20d4:	a4 9f       	mul	r26, r20
    20d6:	80 0d       	add	r24, r0
    20d8:	91 1d       	adc	r25, r1
    20da:	11 24       	eor	r1, r1
    20dc:	08 95       	ret

000020de <__udivmodhi4>:
    20de:	aa 1b       	sub	r26, r26
    20e0:	bb 1b       	sub	r27, r27
    20e2:	51 e1       	ldi	r21, 0x11	; 17
    20e4:	07 c0       	rjmp	.+14     	; 0x20f4 <__udivmodhi4_ep>

000020e6 <__udivmodhi4_loop>:
    20e6:	aa 1f       	adc	r26, r26
    20e8:	bb 1f       	adc	r27, r27
    20ea:	a6 17       	cp	r26, r22
    20ec:	b7 07       	cpc	r27, r23
    20ee:	10 f0       	brcs	.+4      	; 0x20f4 <__udivmodhi4_ep>
    20f0:	a6 1b       	sub	r26, r22
    20f2:	b7 0b       	sbc	r27, r23

000020f4 <__udivmodhi4_ep>:
    20f4:	88 1f       	adc	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	5a 95       	dec	r21
    20fa:	a9 f7       	brne	.-22     	; 0x20e6 <__udivmodhi4_loop>
    20fc:	80 95       	com	r24
    20fe:	90 95       	com	r25
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	08 95       	ret

00002106 <__tablejump2__>:
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	05 90       	lpm	r0, Z+
    210c:	f4 91       	lpm	r31, Z
    210e:	e0 2d       	mov	r30, r0
    2110:	09 94       	ijmp

00002112 <__umulhisi3>:
    2112:	a2 9f       	mul	r26, r18
    2114:	b0 01       	movw	r22, r0
    2116:	b3 9f       	mul	r27, r19
    2118:	c0 01       	movw	r24, r0
    211a:	a3 9f       	mul	r26, r19
    211c:	70 0d       	add	r23, r0
    211e:	81 1d       	adc	r24, r1
    2120:	11 24       	eor	r1, r1
    2122:	91 1d       	adc	r25, r1
    2124:	b2 9f       	mul	r27, r18
    2126:	70 0d       	add	r23, r0
    2128:	81 1d       	adc	r24, r1
    212a:	11 24       	eor	r1, r1
    212c:	91 1d       	adc	r25, r1
    212e:	08 95       	ret

00002130 <abort>:
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	f8 94       	cli
    2136:	0c 94 9d 10 	jmp	0x213a	; 0x213a <_exit>

0000213a <_exit>:
    213a:	f8 94       	cli

0000213c <__stop_program>:
    213c:	ff cf       	rjmp	.-2      	; 0x213c <__stop_program>
